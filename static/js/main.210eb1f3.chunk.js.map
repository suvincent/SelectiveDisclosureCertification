{"version":3,"sources":["getWeb3.js","logo.svg","components/DriveTable.js","pages/createCert.js","App.js","serviceWorker.js","index.js","model/row.js","components/privatekey.js","test/ipfs.js","pages/home.js","pages/verify.js"],"names":["getWeb3","a","window","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","walletconnectinit","WalletConnectProvider","infuraId","on","accounts","chainId","code","reason","DriveTable","props","Table","striped","bordered","hover","size","style","width","margin","marginTop","files","map","self","index","key","value","random","didJWT","require","crypto","J","CryptoJS","CreateCert","useState","setaccount","contract","setcontract","uploadfile","setuploadfile","filelist","setfilelist","Key","setKey","Value","setValue","IPFSHash","setIPFSHash","address","setAddr","C_IPFSorDownload","setC_IPFSorDownload","V_IPFSorDownload","setV_IPFSorDownload","pubkey","setpubKey","result","setresult","UploadtoChain","VerifyIsIPFS","fileData","JSON","stringify","blob","Blob","type","cid","toString","GenVerifyJson","message","alert","generateHexString","length","ret","Math","substring","tempV","SHA256","GenPDCommitment","commitment","r","row","arr","C_value","C_random","methods","createCommitment","call","SignatureMap","forEach","element","Commitment","SignObj","Certificate","Issuer_address","Receiver_address","j","eth","personal","sign","utils","fromUtf8","err","sig","writeObj","Issuer_signature","Download","url","URL","createObjectURL","link","document","createElement","download","href","click","IPFS","VerifyList","item","push","randomBytes","encryptJWEFile","VJwt","EthCrypto","encryptWithPublicKey","encrypted","exportObj","jwt","decodeMessage","fileData2","blob2","url2","link2","payload","enc","xc20pDirEncrypter","prepareCleartext","w","createJWE","useEffect","ipfs","getAccounts","i","Contract","PDContract","abi","error","fetchData","rel","integrity","crossOrigin","referrerPolicy","Container","fluid","paddingLeft","paddingRight","Row","Col","sm","className","color","Form","xs","Control","onChange","e","target","placeholder","Button","variant","content","onClick","lg","Title","privatekey","setprivatekey","marginRight","OnchangeInput","checked","onstyle","onlabel","offlabel","App","setweb3","Navbar","bg","Brand","alt","src","ReactLogo","height","Nav","Item","to","path","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","k","v","c","s","this","share","max","floor","PrivateKeyForm","settype","preventDefault","stopPropagation","flag","create","file","add","returnContent","get","chunk","Wallet","EthUtil","privateKeyToPublicKey","DidRegistryContract","Home","attibuteList","setAttr","Akey","setkey","Avalue","setvalue","prikey","setpriKey","setpubkey","Addr","setaddr","history","changed","previousChange","getPastEvents","filter","id","fromBlock","toBlock","events","obj","parse","array","Object","keys","event","returnValues","unshift","newList","cut","CutTailZero","name","nv","getIpfsHashFromBytes32","newrow","asciiToHex","getBytes32FromIpfsHash","setAttribute","send","from","ipfsListing","bs58","decode","slice","bytes32Hex","hashHex","hashBytes","Buffer","encode","hex","str","l","parseInt","substr","String","fromCharCode","privateKeyBuffer","toBuffer","p","default","fromPrivateKey","getPublicKeyString","publicKey","addr","keccakFromHexString","Verify","setCert","setVerify","VerifyCount","setVerifyCount","CertCount","setCertCount","setType","show","setShow","V_IPFSorUPload","setV_IPFSorUPload","V_IPFSHash","setV_IPFSHash","reader","FileReader","onload","decryptWithPrivateKey","ciphertext","ephemPublicKey","iv","mac","rkey","decryptJWEFILE","Vlist","GetfileFromIPFS","readAsBinaryString","mapping","VerifyCommitment","openCommitment","ipfsHash","jweObj","dec","xc20pDirDecrypter","decryptJWE","decoded","decodeCleartext","onHide","Header","closeButton","Body","Footer","Check","label","position","Updatelist","handleCheckBox","readAsText","marginBottom","open","write","V_Certificate","VerStr","ecRecover","toLowerCase","nonce"],"mappings":"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","file":"static/js/main.210eb1f3.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nexport const getWeb3 =async () =>{\r\n  // new Promise(async (resolve, reject) => {\r\n  //   // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n  //   window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          return(web3);\r\n        } catch (error) {\r\n          return(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        return(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          // \"http://127.0.0.1:8545\"// for development\r\n          \"https://ropsten.infura.io/v3/9f86490b4b644532bfb6e4f26a7ab590\"//for testnet\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        return(web3);\r\n      }\r\n  //   });\r\n  // });\r\n    }\r\n\r\n\r\n\r\nexport const walletconnectinit =async () =>{\r\n\r\n      const provider = new WalletConnectProvider({\r\n        infuraId: \"9f86490b4b644532bfb6e4f26a7ab590\",\r\n      });\r\n    \r\n\r\n    await provider.enable();\r\n    console.log(provider)\r\n    // Subscribe to accounts change\r\n    provider.on(\"accountsChanged\", (accounts) => {\r\n      console.log(accounts);\r\n    });\r\n\r\n    // Subscribe to chainId change\r\n    provider.on(\"chainChanged\", (chainId) => {\r\n      console.log(chainId);\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n    });\r\n    window.provider = provider;\r\n    const web3 = new Web3(provider);\r\n\r\n    return web3\r\n    \r\n  };\r\n\r\n// export default getWeb3;\r\n","export default __webpack_public_path__ + \"static/media/logo.927f1d60.svg\";","import React from \"react\";\r\nimport {Table} from 'react-bootstrap'\r\n\r\nfunction DriveTable(props){\r\n    return(\r\n        <Table striped bordered hover size=\"sm\" style = {{width :'85%',margin:\"auto\",marginTop : \"1%\"}}>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>key</th>\r\n              <th>value</th>\r\n              <th>random</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody >\r\n          {props.files.map((self,index) => <tr key={index}>\r\n              <td width=\"3%\">{index}</td>\r\n              {/* name */}\r\n              <td>{self.key}</td>\r\n              {/* type */}\r\n              <td>{self.value}</td>\r\n              {/* hash */}\r\n              <td width=\"35%\">{self.random}</td>\r\n              \r\n            </tr>)}\r\n          </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default DriveTable","import React, { useState, useEffect} from \"react\";\r\n// import getWeb3 from \"../getWeb3\";\r\nimport {Button,Container,Row,Col,Form} from 'react-bootstrap'\r\nimport \"../App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport testAdd from '../test/ipfs'\r\nimport EthCrypto from 'eth-crypto';\r\nimport PrivateKeyForm from '../components/privatekey'\r\nimport DriveTable from '../components/DriveTable'\r\nimport PDContract from \"../contracts/PedersenCommitment.json\";\r\nimport row from \"../model/row\"\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\r\nconst didJWT = require('did-jwt')\r\nconst crypto = require('crypto'); \r\nconst J = require('dag-jose-utils')\r\n// import CryptoJS from \"cryptojs\"\r\nconst CryptoJS = require(\"crypto-js\")\r\nfunction CreateCert (props) {\r\n  // const [storageValue ,setstorageValue] = useState(0)\r\n  const [web3,] = useState(props.web3)\r\n  const [accounts,setaccount] = useState(null)\r\n  const [contract,setcontract] = useState(null)\r\n  const [uploadfile,setuploadfile] = useState(null)\r\n  // const [privatekey,setprivatekey] = useState(null)\r\n  // const [initflag,setinitflag] = useState(false);\r\n  const [filelist,setfilelist] = useState([])\r\n  const [Key,setKey] = useState(\"\")\r\n  const [Value,setValue] = useState(\"\")\r\n  // const [IPFSHash,setIPFSHash] = useState(\"QmVKRJ4jxxzqchoB3K4pLwmtJzBawN3GQdR4ZzwYYMJxPa\");\r\n  const [IPFSHash,setIPFSHash] = useState(\"\");\r\n  const [address,setAddr] = useState(\"\");\r\n  const [C_IPFSorDownload,setC_IPFSorDownload] = useState(true);\r\n  const [V_IPFSorDownload,setV_IPFSorDownload] = useState(true);\r\n  const [pubkey,setpubKey] = useState(\"\")\r\n\r\n  const [result,setresult] = useState(\"\")\r\n  \r\n  useEffect(()=>{\r\n    async function fetchData(){\r\n      try {\r\n        // Get network provider and web3 instance.\r\n        //const web3 = await getWeb3();\r\n        if(!window.ipfs)await window[\"INITIPFS\"](true)\r\n        //setweb3(web3)\r\n        // Use web3 to get the user's accounts.\r\n        if(!accounts)setaccount(await web3.eth.getAccounts());\r\n        // Get the contract instance.\r\n        // const networkId = await web3.eth.net.getId();\r\n        // console.log(networkId)\r\n        // const deployedNetwork = PDContract.networks[networkId];\r\n        if(!contract){\r\n          let i = new web3.eth.Contract(\r\n            PDContract.abi,\r\n            // deployedNetwork && deployedNetwork.address,\r\n            \"0xf07AceA1dB989df2236339D616338bEcB84a0600\"\r\n          );// 0x4CF247a90956185559EE5fb2A9A7E8dDd8A8E985 Drive address\r\n          \r\n          setcontract(i)\r\n        }\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n    fetchData()//.then(runExample())\r\n  });\r\n \r\n// function OK\r\n  async function UploadtoChain(VerifyIsIPFS){// without encryption'\r\n    \r\n      if(uploadfile && contract){\r\n          try{\r\n          const fileData = JSON.stringify(uploadfile);\r\n          const blob = new Blob([fileData], {type: \"text/plain\"});\r\n          let cid =await window[\"ipfsadd\"](blob,true)\r\n          // console.log(cid.toString())\r\n          setIPFSHash(cid.toString())\r\n          GenVerifyJson(cid.toString(),VerifyIsIPFS)\r\n          }\r\n          catch(err){\r\n            console.log(err.message)\r\n          }\r\n          // test decrypt\r\n          // await GetfileDecrypt(dekey,deiv,cid.toString())\r\n      }\r\n      else{\r\n          console.log('no file selected')\r\n          alert('no file selected')\r\n      }\r\n  }\r\n\r\n\r\n// function OK\r\n  function generateHexString(length) {\r\n    var ret = \"\";\r\n    while (ret.length < length) {\r\n      ret += Math.random().toString(16).substring(2);\r\n    }\r\n    return ret.substring(0,length);\r\n  }\r\n\r\n  async function AddColumn(){\r\n    // console.log(\"ADD\")\r\n    if(!Key||!Value){\r\n        alert(\"欄位不能為空值\")\r\n        return\r\n    }\r\n    let tempV = Value\r\n    if(typeof Value != 'number'){\r\n       alert(\"value will be hashed\")\r\n       tempV =\"0x\"+ CryptoJS.SHA256(Value).toString();\r\n    }\r\n    // console.log(tempV)\r\n    \r\n    let random =\"0x\"+ generateHexString(58)\r\n    // console.log(random)\r\n    let commitment = await GenPDCommitment(tempV,random);\r\n    // setfilelist(filelist.push(r))\r\n    // await VerifyCommitment(Value,\"38843084404664773737811034719809089006355033921160053724844404266166110833973\");\r\n    var r = new row(Key,Value,random,commitment,typeof Value);\r\n    setfilelist( arr => [...arr, r]);\r\n    setKey(\"\")\r\n    setValue(\"\")\r\n  }\r\n\r\n  async function GenPDCommitment(C_value,C_random){\r\n      try{\r\n        let result = await contract.methods.createCommitment(C_random,C_value).call();\r\n        // console.log(result)\r\n        return result\r\n      }\r\n      catch(e){\r\n          console.log(e);\r\n      }\r\n     \r\n  }\r\n\r\n  async function GenSigneture(){\r\n    // global certificate part\r\n    if(!address){\r\n      alert(\"please fill in the receiver address\")\r\n      return\r\n    }\r\n    let SignatureMap = {}\r\n    filelist.forEach(element => {\r\n      let key = \"0x\"+ CryptoJS.SHA256(element.key+element.random).toString()\r\n      SignatureMap[key] = element.Commitment\r\n    });\r\n    let SignObj = {\r\n      Certificate:SignatureMap,\r\n      Issuer_address:accounts[0],\r\n      Receiver_address:address\r\n    }\r\n    let j = JSON.stringify(SignObj)\r\n    // console.log(j)// 可以看看要不要hash??\r\n    web3.eth.personal.sign(web3.utils.fromUtf8(j), accounts[0], (err,sig)=>{\r\n          // console.log(sig)\r\n          let writeObj = {\r\n            Certificate:SignatureMap,\r\n            Issuer_address:accounts[0],\r\n            Receiver_address:address,\r\n            Issuer_signature:sig\r\n          }\r\n          setuploadfile(writeObj)\r\n    }); \r\n  }\r\n  function Download(){\r\n    const fileData = JSON.stringify(uploadfile);\r\n    const blob = new Blob([fileData], {type: \"text/plain\"});\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.download = 'Certificate.json';\r\n    link.href = url;\r\n    link.click();\r\n  }\r\n\r\n  async function GenVerifyJson(IPFS,VerifyIsIPFS){\r\n      // \r\n      if(!pubkey){\r\n        alert(\"please insert public key first!\")\r\n        return\r\n      }\r\n      // Verify List\r\n      let VerifyList = []\r\n      filelist.forEach(element => {\r\n        let item = {\r\n          key:element.key,\r\n          value:element.value,\r\n          random:element.random\r\n        }\r\n        VerifyList.push(item)\r\n      });\r\n      let writeObj = {\r\n        IPFSHash:IPFS,\r\n        VerifyList:VerifyList\r\n      }\r\n      //encrypt JWT key\r\n      let key = crypto.randomBytes(32)\r\n      let VJwt =await encryptJWEFile(writeObj,key)\r\n      // console.log(key.toString('Hex'))\r\n      const encrypted = await EthCrypto.encryptWithPublicKey(\r\n        pubkey, //receiver publicKey\r\n        key.toString('Hex') // message\r\n      )\r\n\r\n      //\r\n      let exportObj = {\r\n        jwt:VJwt,\r\n        decodeMessage:encrypted\r\n      }\r\n\r\n      const fileData2 = JSON.stringify(exportObj);\r\n      const blob2 = new Blob([fileData2], {type: \"text/plain\"});\r\n      if(VerifyIsIPFS){\r\n        let cid =await window[\"ipfsadd\"](blob2,true)\r\n        // console.log(cid)\r\n        setresult(cid)\r\n        alert(\"Verify has been published to IPFS,\\n IPFS Hash is \"+cid)\r\n      }\r\n      else{\r\n        const url2 = URL.createObjectURL(blob2);\r\n        const link2 = document.createElement('a');\r\n        link2.download = 'Verify.json';\r\n        link2.href = url2;\r\n        link2.click();\r\n      }\r\n  }\r\n\r\n  function OnchangeInput(e){\r\n    setAddr(e.target.value)\r\n    // console.log(props.privatekey)\r\n  }\r\n  async function encryptJWEFile(payload,key){\r\n    let enc = didJWT.xc20pDirEncrypter(key);\r\n    let w = await J.prepareCleartext(payload)\r\n    let jwt = await didJWT.createJWE(w,[enc])\r\n    return jwt\r\n  }\r\n\r\n  async function GenCertificate(){\r\n    // console.log(C_IPFSorDownload)\r\n    // console.log(V_IPFSorDownload)\r\n    \r\n    // Verify\r\n    if(V_IPFSorDownload){//IPFS\r\n      // Certificate\r\n      if(C_IPFSorDownload){//IPFS\r\n          UploadtoChain(true)\r\n          // UPload Verifiy to chain\r\n      }\r\n      else{//Local\r\n        Download();\r\n        // 這個Gen 應該要\r\n        GenVerifyJson(\"None\",false)\r\n      }\r\n    }\r\n    else{//Local\r\n      // Certificate\r\n      if(C_IPFSorDownload){//IPFS\r\n        UploadtoChain(false) \r\n      }\r\n      else{//Local\r\n        Download();\r\n        GenVerifyJson(\"None\",false)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  if (!web3) {\r\n    return <div>Loading Web3, accounts, and contract...</div>;\r\n  }\r\n    return (\r\n      <>\r\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossOrigin=\"anonymous\" referrerPolicy=\"no-referrer\" />\r\n      <Container fluid style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n        {/* <Header></Header> */}\r\n        <Row>\r\n          <Col sm={9}>\r\n          <div className=\"App\">\r\n            <br/>\r\n                  <h2>Certificate creation</h2>\r\n                  <h3 style={{color:\"red\"}}>\r\n                    School Mode\r\n                  </h3>\r\n            <br/>\r\n            <h4>add Certificate Column</h4>\r\n            <Form>\r\n                <Form.Row>\r\n                    <Col></Col>\r\n                    <Col xs={2}>\r\n                    <Form.Control className=\"mr-sm-2\"  value={Key} onChange={e => setKey(e.target.value)} placeholder=\"Key\" />\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                    <Form.Control  value={Value} onChange={e => setValue(e.target.value)} placeholder=\"Value\" />\r\n                    </Col>\r\n                    <Col xs={1}>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {AddColumn}><i className=\"fas fa-plus\"></i></Button>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {GenSigneture}>Gen Signature</Button>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <DriveTable files={filelist} />\r\n          </div>\r\n          </Col>\r\n          <Col xs lg=\"2\">\r\n            <PrivateKeyForm Title={\"Receiver publicKey Key\"} privatekey={pubkey} setprivatekey={setpubKey} style={{ marginRight: 4 }}/>\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">Receiver Address</label>\r\n              <Form.Control type=\"text\" value={address} onChange={(e)=>{OnchangeInput(e)}}  placeholder=\"0x.....\"></Form.Control>\r\n            </form>\r\n            <form className=\"Uploadform\">\r\n              <Container>\r\n                  <Row>\r\n                    <Col>\r\n                        <label className=\"password\">Certificate Publish to IPFS(On)</label>\r\n                        <BootstrapSwitchButton checked={C_IPFSorDownload} onChange={()=>{setC_IPFSorDownload(!C_IPFSorDownload)}} onstyle=\"info\" onlabel=\"IPFS\" offlabel=\"Local\" width=\"100\"/>\r\n                        <br/>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                        <label className=\"password\">Verify Publish to IPFS(On)</label>\r\n                        <BootstrapSwitchButton checked={V_IPFSorDownload} onChange={()=>{setV_IPFSorDownload(!V_IPFSorDownload)}} onstyle=\"info\" onlabel=\"IPFS\" offlabel=\"Local\" width=\"100\"/>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <br/>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {GenCertificate}>Gen Certificate</Button>\r\n                      {(result)?\"Verify JWE IPFS : \"+result:\"\"}\r\n                    </Col>\r\n                  \r\n                    {/* <Col>\r\n                    <label className=\"password\"> &nbsp;&nbsp;&nbsp;upload&nbsp;&nbsp;</label>\r\n                    <a className=\"middle\"><Button variant=\"secondary\" content='Upload' onClick = {UploadtoChain}>Upload to IPFS</Button></a>\r\n                    </Col>\r\n                    <Col>\r\n                    <label className=\"password\"> &nbsp;&nbsp;&nbsp;Download&nbsp;&nbsp;</label>\r\n                    <a className=\"middle\"><Button variant=\"secondary\" content='Upload' onClick = {Download}>DownLoad to Local</Button></a>\r\n                    </Col> */}\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      {(IPFSHash)?<a href={\"https://ipfs.io/ipfs/\"+IPFSHash} target=\"_blank\" rel=\"noreferrer\">View Raw Certificate</a>:\"\"}\r\n                    </Col>\r\n                  </Row>\r\n              </Container>\r\n            </form>\r\n            {/* <form className=\"Uploadform\">\r\n              <label className=\"password\">Upload file</label>\r\n              <input type=\"file\" onChange={captureFile} style={{ marginBottom: 4 }}/>\r\n            </form> */}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      \r\n      \r\n      </>\r\n      );\r\n}\r\n\r\nexport default CreateCert;\r\n","import React, { useState} from \"react\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport {getWeb3,walletconnectinit} from \"./getWeb3\";\r\nimport {Button, Navbar,Nav} from 'react-bootstrap'\r\nimport ReactLogo from './logo.svg';\r\nimport \"./App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport testAdd from './test/ipfs'\r\n// import EthCrypto from 'eth-crypto';\r\n// import PrivateKeyForm from './components/privatekey'\r\n// import DriveTable from './components/DriveTable'\r\n// import PDContract from \"./contracts/PedersenCommitment.json\";\r\n// import Header from './components/Header'\r\nimport Home from './pages/home'\r\nimport Verify from './pages/verify'\r\nimport CreateCert from './pages/createCert'\r\n// import CryptoJS from \"cryptojs\"\r\n// const CryptoJS = require(\"crypto-js\")\r\n// const privateKeyToPublicKey = require('ethereum-private-key-to-public-key')\r\n\r\nfunction App () {\r\n  const [web3,setweb3] = useState(null)\r\n\r\n\r\n\r\n  async function defaultinit(){\r\n    try{\r\n    const a = await getWeb3();\r\n    console.log(a)\r\n    setweb3(a)\r\n    }\r\n    catch(err){\r\n      console.log(err.message)\r\n    }\r\n  }\r\n  \r\n  async function walletinit(){\r\n    try{\r\n    const web3 = await walletconnectinit();\r\n    console.log(web3)\r\n    setweb3(web3)\r\n    }\r\n    catch(err){\r\n      console.log(err.message)\r\n    }\r\n  }\r\n\r\n\r\n  if (!web3) {\r\n    return <>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossOrigin=\"anonymous\"/>\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/\">\r\n          <img\r\n            alt=\"\"\r\n            src={ReactLogo}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n          />{' '}\r\n          React Bootstrap\r\n        </Navbar.Brand>\r\n        \r\n    </Navbar>\r\n    <div className=\"App\">\r\n      <Button variant=\"secondary\" content='Upload' onClick = {walletinit} style={{marginTop:\"2%\"}} >Connect to wallet</Button>\r\n      &nbsp;\r\n      <Button variant=\"secondary\" content='Upload' onClick = {defaultinit} style={{marginTop:\"2%\"}} >Connect to chrome metamask</Button>\r\n    </div>\r\n    </>;\r\n  }\r\n  \r\n  return (\r\n    <>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossOrigin=\"anonymous\"/>\r\n    <Router> \r\n      <div>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/\">\r\n          <img\r\n            alt=\"\"\r\n            src={ReactLogo}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n          />{' '}\r\n          React Bootstrap\r\n        </Navbar.Brand>\r\n        <Nav>\r\n            <Nav.Item>\r\n              <Link to=\"/SelectiveDisclosureCertification/\" style={{color: \"white\"}}>Home</Link>\r\n            </Nav.Item>\r\n            &nbsp;&nbsp;\r\n            <Nav.Item>\r\n              <Link to=\"/SelectiveDisclosureCertification/create\" style={{color: \"white\"}}>Create certificate</Link>\r\n            </Nav.Item>\r\n            &nbsp;&nbsp;\r\n            <Nav.Item>\r\n              <Link to=\"/SelectiveDisclosureCertification/verify\" style={{color: \"white\"}}>Verify Certificate</Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n      </Navbar>\r\n        \r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/SelectiveDisclosureCertification/create\">\r\n            <CreateCert web3={web3}/>\r\n          </Route>\r\n          <Route path=\"/SelectiveDisclosureCertification/verify\">\r\n            <Verify web3={web3}/>\r\n          </Route>\r\n          <Route path=\"/SelectiveDisclosureCertification/\">\r\n            <Home web3={web3}/>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import {\r\n//     BrowserRouter as Router,\r\n//     Switch,\r\n//     Route,\r\n//     Link\r\n//   } from \"react-router-dom\";\r\nReactDOM.render(\r\n  // <Router>\r\n  //         <Route exact path=\"/\" component = {App}/> \r\n  //         {/* <Route path=\"/Upload\" component = {Upload} /> */}\r\n  // </Router>, document.getElementById('root'));\r\n<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export default class row{\r\n    constructor(k,v,r,c,type,s = true){\r\n        console.log(k,v,r,c)\r\n        this.key = k\r\n        this.value = v\r\n        this.random = r\r\n        this.Commitment = c\r\n        this.type = type\r\n        this.share = s\r\n    }\r\n    getRandomInt(max) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n    \r\n}","import React, { useState } from \"react\";\r\n\r\nfunction PrivateKeyForm(props){\r\n    const [type,settype] = useState('input')\r\n\r\n    function showHide(e){\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if(type === 'input'){\r\n            settype('password')\r\n        }\r\n        else{\r\n            settype('input')\r\n        }\r\n    }\r\n    \r\n    function OnchangeInput(e){\r\n        props.setprivatekey(e.target.value)\r\n        // console.log(props.privatekey)\r\n    }\r\n    \r\n    return(\r\n        <>\r\n        <form className=\"littleform\">\r\n        <label className=\"password\">{props.Title}\r\n        <input type={type} className=\"password__input\" value={props.privatekey} onChange={OnchangeInput} />\r\n        <span className=\"password__show\" onClick={showHide}>{type === 'input' ? 'Hide' : 'Show'}</span>\r\n        </label>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PrivateKeyForm","const IPFS = require('ipfs-core')\r\nexport async function init (flag) {\r\n    if(!flag)return\r\n    const ipfs = await IPFS.create()\r\n    console.log(\"initailzing\")\r\n    window[\"ipfs\"] =  ipfs\r\n}\r\n\r\nexport async function testAdd (file,flag) {\r\n    if(!flag)return\r\n    const ipfs = window[\"ipfs\"]\r\n    const { cid } = await ipfs.add(file)\r\n    // console.info(cid)\r\n    // console.log(\"QAQ\")\r\n    return cid.toString()\r\n    // QmXXY5ZxbtuYj6DnfApLiGstzPN7fvSyigrRee3hDWPCaf\r\n}\r\nexport async function testGet(cid,flag){\r\n    if(!flag)return\r\n    const ipfs = window[\"ipfs\"]\r\n    var returnContent = [];\r\n    for await (const file of ipfs.get(cid)) {\r\n    console.log(file.type, file.path)\r\n    if (!file.content) continue;\r\n    const content = []\r\n    for await (const chunk of file.content) {\r\n        content.push(chunk)\r\n    }\r\n    console.log(content)\r\n    // console.log(content.toString())\r\n    returnContent.push(content)\r\n    }\r\n    \r\n    console.log(\"finish\")\r\n    return returnContent\r\n}\r\n\r\n// export {testAdd, testGet};\r\nwindow[\"ipfsadd\"] = testAdd\r\nwindow[\"ipfsget\"] = testGet\r\nwindow[\"INITIPFS\"] = init\r\n// console.log('QAQ')","import React, { useState, useEffect} from \"react\";\r\n// import getWeb3 from \"../getWeb3\";\r\nimport {Button,Container,Row,Col,Table,Form} from 'react-bootstrap'\r\nimport \"../App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport testAdd from '../test/ipfs'\r\n\r\nimport bs58 from 'bs58'\r\n// import CryptoJS from \"cryptojs\"\r\nvar Wallet = require('ethereumjs-wallet');\r\nvar EthUtil = require('ethereumjs-util');\r\nconst privateKeyToPublicKey = require('ethereum-private-key-to-public-key')\r\nconst DidRegistryContract = require('ethr-did-registry')\r\nfunction Home (props) {\r\n    const [web3,] = useState(props.web3)\r\n    const [accounts,setaccount] = useState(null)\r\n    const [contract,setcontract] = useState(null)\r\n    const [attibuteList,setAttr] = useState([])\r\n    const [Akey,setkey] = useState(\"\")\r\n    const [Avalue,setvalue] = useState(\"\")\r\n    const [prikey,setpriKey] = useState(\"\")\r\n    const [pubkey,setpubkey] = useState(\"\")\r\n    const [Addr,setaddr] = useState(\"\")\r\n\r\n    useEffect(()=>{\r\n      async function fetchData(){\r\n        try {\r\n          // Get network provider and web3 instance.\r\n          //const web3 = await getWeb3();\r\n          if(!window.ipfs)await window[\"INITIPFS\"](true)\r\n          //setweb3(web3)\r\n          // Use web3 to get the user's accounts.\r\n          if(!accounts)setaccount(await web3.eth.getAccounts());\r\n          // Get the contract instance.\r\n          // const networkId = await web3.eth.net.getId();\r\n          // console.log(networkId)\r\n          // const deployedNetwork = PDContract.networks[networkId];\r\n          if(!contract){\r\n            let i = new web3.eth.Contract(\r\n              DidRegistryContract.abi,\r\n              // deployedNetwork && deployedNetwork.address,\r\n              \"0xdca7ef03e98e0dc2b855be647c39abe984fcf21b\"\r\n            );// 0x4CF247a90956185559EE5fb2A9A7E8dDd8A8E985 Drive address\r\n            \r\n            setcontract(i)\r\n          }\r\n        } catch (error) {\r\n          // Catch any errors for any of the above operations.\r\n          alert(\r\n            `Failed to load web3, accounts, or contract. Check console for details.`,\r\n          );\r\n          console.error(error);\r\n        }\r\n      }\r\n      fetchData()//.then(runExample())\r\n    });\r\n\r\n    async function testReg(){\r\n      // let result = await contract.methods.identityOwner(accounts[0]).call()\r\n      // console.log(contract)\r\n      const history = []\r\n      let previousChange = await contract.methods.changed(accounts[0]).call()\r\n      // console.log(typeof(previousChange))\r\n      while (previousChange) {\r\n        if(previousChange === \"0\")break\r\n          await contract.getPastEvents('DIDAttributeChanged', {\r\n            filter: {id: [accounts[0]]},  \r\n            fromBlock: previousChange,\r\n            toBlock: previousChange\r\n          }, (error, events) => { \r\n      \r\n            if (!error){\r\n              var obj=JSON.parse(JSON.stringify(events));\r\n              var array = Object.keys(obj)\r\n              for(let index in array){\r\n                let event = obj[array[index]].returnValues\r\n                history.unshift(event)\r\n                previousChange = event.previousChange\r\n              }\r\n            }\r\n            else {\r\n              console.log(error)\r\n            }})\r\n      }\r\n      setAttr(attibuteList => history)\r\n      // console.log(history)\r\n    }\r\n\r\n    async function TurnRawtoReadable(){\r\n      if(attibuteList.length === 0){\r\n        alert(\"please get raw history first!\")\r\n      }\r\n      let newList = []\r\n      attibuteList.forEach(async(row) => {\r\n        // console.log(row.value)\r\n        let cut = CutTailZero(row.name)\r\n        let nv = row.value;\r\n        try{\r\n          // 如果長度 == hash => 轉hash to IPFS hash\r\n          if(nv.length === \"0x3b0326dd6d55bc8100afc3e7f2e8b8626e917dc0ccbf96b7016785b42b9ce29e\".length)\r\n            nv = getIpfsHashFromBytes32(row.value);\r\n          else // 轉乘ascii\r\n            nv=CutTailZero(row.value)\r\n        }\r\n        catch(err){\r\n          console.log(err.message)\r\n        }\r\n        // console.log(nv)\r\n        let newrow = {\r\n          name: cut,\r\n          value:nv,\r\n          previousChange:row.previousChange\r\n        }\r\n        newList.push(newrow);\r\n      \r\n      setAttr(attibuteList => newList)\r\n      })\r\n    }\r\n\r\n    async function SetAttributes(){\r\n      try{\r\n        let name = web3.utils.asciiToHex(Akey)//string to byte32\r\n        // console.log(web3.utils.hexToAscii(name))\r\n        let value =await getBytes32FromIpfsHash(Avalue)\r\n        // console.log(getIpfsHashFromBytes32(value))\r\n        // console.log(name,value)\r\n        await contract.methods.setAttribute(accounts[0], name, value, \"9999999\").send({ from: accounts[0] });\r\n      }\r\n      catch(err){\r\n        console.log(err.message)\r\n        alert(err.message)\r\n      }\r\n    }\r\n\r\n    async function SetRaw(){\r\n      try{\r\n        let name = web3.utils.asciiToHex(Akey)//string to byte32\r\n        // console.log(web3.utils.hexToAscii(name))\r\n        let value =web3.utils.asciiToHex(Avalue)\r\n        // console.log(getIpfsHashFromBytes32(value))\r\n        // console.log(name,value)\r\n        await contract.methods.setAttribute(accounts[0], name, value, \"9999999\").send({ from: accounts[0] });\r\n      }\r\n      catch(err){\r\n        console.log(err.message)\r\n        alert(err.message)\r\n      }\r\n    }\r\n\r\n    async function getBytes32FromIpfsHash(ipfsListing) {\r\n      return \"0x\"+bs58.decode(ipfsListing).slice(2).toString('hex')\r\n    }\r\n\r\n    function getIpfsHashFromBytes32(bytes32Hex) {\r\n      // Add our default ipfs values for first 2 bytes:\r\n      // function:0x12=sha2, size:0x20=256 bits\r\n      // and cut off leading \"0x\"\r\n      const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n      const hashBytes = Buffer.from(hashHex, 'hex');\r\n      const hashStr = bs58.encode(hashBytes)\r\n      return hashStr\r\n    }\r\n\r\n    function CutTailZero(hex) {\r\n      var str = \"\";\r\n      var i = 0, l = hex.length;\r\n      if (hex.substring(0, 2) === '0x') {\r\n        i = 2;\r\n      }\r\n      for (; i < l; i+=2) {\r\n        var code = parseInt(hex.substr(i, 2), 16);\r\n        if(code !== 0) {\r\n          str += String.fromCharCode(code);\r\n        }\r\n      }\r\n    \r\n      return str;\r\n    }\r\n\r\n    function OnchangeKey(e){\r\n      setkey(e.target.value)\r\n    }\r\n\r\n    function OnchangeValue(e){\r\n      setvalue(e.target.value)\r\n    }\r\n\r\n    function GenPkandAddr(){\r\n      // Get a wallet instance from a private key\r\n      const privateKeyBuffer = EthUtil.toBuffer('0x'+prikey);\r\n      const wallet = Wallet.default.fromPrivateKey(privateKeyBuffer);\r\n\r\n      // Get a public key\r\n      let p = wallet.getPublicKeyString();                         \r\n      const publicKey = privateKeyToPublicKey(prikey).toString('hex')\r\n      setpubkey(publicKey)\r\n      // validate\r\n      // 看看hash後的後20個buffer是否跟address一樣\r\n      var addr = EthUtil.keccakFromHexString(p);\r\n      addr = '0x'+ addr.toString('hex',12,32);\r\n      setaddr(addr)\r\n    }\r\n    return (\r\n      <>\r\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossOrigin=\"anonymous\" referrerPolicy=\"no-referrer\" />\r\n      <Container fluid style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n        {/* <Header></Header> */}\r\n        <Row>\r\n          <Col sm={9}>\r\n          <div className=\"App\">\r\n            <br/>\r\n                  <h2>Home</h2>\r\n            <br/>\r\n            <h4>uPort Registry</h4>\r\n            <br/>\r\n            <Button variant=\"secondary\" content='Upload' onClick = {testReg}>Get raw Attributes</Button>\r\n            &nbsp;\r\n            <Button variant=\"secondary\" content='Upload' onClick = {TurnRawtoReadable}>Get Readable Attributes</Button>\r\n            \r\n            <Table striped bordered hover size=\"sm\" style = {{width :'85%',margin:\"auto\",marginTop : \"1%\"}}>\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>key</th>\r\n                  <th>value</th>\r\n                  <th>previousChange</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody >\r\n              {attibuteList.map((self,index) => <tr key={index}>\r\n                  <td width=\"3%\">{index}</td>\r\n                  {/* name */}\r\n                  <td>{self.name}</td>\r\n                  {/* type */}\r\n                  <td>{self.value}</td>\r\n                  {/* hash */}\r\n                  <td>{self.previousChange}</td>\r\n                </tr>)}\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n          </Col>\r\n          <Col xs lg=\"2\">\r\n            \r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">PedersenCommitment Source Code</label>\r\n              <a href=\"https://ropsten.etherscan.io/address/0xf07AceA1dB989df2236339D616338bEcB84a0600#code\" target=\"_blank\" rel=\"noreferrer\">Source Code</a>\r\n            </form>\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">SetAttributes</label>\r\n              <Form.Control type=\"text\" onChange={OnchangeKey}  placeholder=\"insert Key\"></Form.Control>\r\n              <br/>\r\n              <Form.Control type=\"text\" onChange={OnchangeValue}  placeholder=\"insert Value\"></Form.Control>\r\n              <br/>\r\n              <Button variant=\"secondary\" content='Upload' onClick = {SetAttributes}>Set IPFSHash to Attributes</Button>\r\n              <br/>\r\n              <br/>\r\n              <Button variant=\"secondary\" content='Upload' onClick = {SetRaw}>Set raw value to Attributes</Button>\r\n            </form>\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">private Key\r\n              <input type=\"text\" className=\"password__input\" value={prikey} onChange={(e)=>{setpriKey(e.target.value)}} />\r\n              <span className=\"password__show\" onClick={GenPkandAddr}>Gen!</span>\r\n              </label>\r\n              <label className=\"password\">Public key</label>\r\n              <span>{pubkey}</span>\r\n              <label className=\"password\">Address</label>\r\n              <span>{Addr}</span>\r\n            </form>\r\n          </Col>\r\n           \r\n        </Row>\r\n      </Container>\r\n      \r\n      \r\n      </>\r\n      );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect} from \"react\";\r\n// import getWeb3 from \"../getWeb3\";\r\nimport EthCrypto from 'eth-crypto';\r\n\r\nimport {Button,Container,Row,Col,Form,Table,Badge,Modal} from 'react-bootstrap'\r\nimport \"../App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PDContract from \"../contracts/PedersenCommitment.json\";\r\nimport row from \"../model/row\"\r\nimport testAdd from '../test/ipfs'\r\nimport PrivateKeyForm from '../components/privatekey'\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\r\n\r\nconst didJWT = require('did-jwt')\r\nconst crypto = require('crypto'); \r\nconst J = require('dag-jose-utils')\r\n// import CryptoJS from \"cryptojs\"\r\nconst CryptoJS = require(\"crypto-js\")\r\nfunction Verify (props) {\r\n  const [web3,] = useState(props.web3)\r\n  const [accounts,setaccount] = useState(null)\r\n  const [contract,setcontract] = useState(null)\r\n  const [Certificate,setCert] = useState(null)\r\n  const [Verify,setVerify] = useState(null)\r\n  const [filelist,setfilelist] = useState([])\r\n  const [VerifyCount,setVerifyCount] = useState(0)\r\n  const [CertCount,setCertCount] = useState(0)\r\n  const [type,setType] = useState(0)\r\n  const [show,setShow] = useState(false)\r\n  // const [modalType,setModal] = useState(0)\r\n  const [prikey,setpriKey] = useState(\"\")\r\n  const [pubkey,setpubKey] = useState(\"\")\r\n  const [V_IPFSorDownload,setV_IPFSorDownload] = useState(true);\r\n  const [V_IPFSorUPload,setV_IPFSorUPload] = useState(false);\r\n  const [V_IPFSHash,setV_IPFSHash] = useState(\"\");\r\n  // const [readObj,setReadObj] = useState(null)\r\n  const [result,setresult] = useState(\"\")\r\n  \r\n\r\n\r\n  // type : 0 => IPFS\r\n  // type : 1 => Upload Certificate Manually\r\n  // modalType : 0 => Re Verify Each Row\r\n  // modalType : 1 => View Raw Verification\r\n  // modalType : 2 => View Raw Certification\r\n\r\n  useEffect(()=>{\r\n    async function fetchData(){\r\n      try {\r\n        // Get network provider and web3 instance.\r\n        //const web3 = await getWeb3();\r\n        if(!window.ipfs)await window[\"INITIPFS\"](true)\r\n        //setweb3(web3)\r\n        // Use web3 to get the user's accounts.\r\n        if(!accounts)setaccount(await web3.eth.getAccounts());\r\n        // Get the contract instance.\r\n        // const networkId = await web3.eth.net.getId();\r\n        // console.log(networkId)\r\n        // const deployedNetwork = PDContract.networks[networkId];\r\n        if(!contract){\r\n          let i = new web3.eth.Contract(\r\n            PDContract.abi,\r\n            // deployedNetwork && deployedNetwork.address,\r\n            \"0xf07AceA1dB989df2236339D616338bEcB84a0600\"\r\n          );// 0x4CF247a90956185559EE5fb2A9A7E8dDd8A8E985 Drive address\r\n          \r\n          setcontract(i)\r\n        }\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n    fetchData()//.then(runExample())\r\n  });\r\n\r\n  // function OK\r\n  function captureCertFile (event) {\r\n    event.stopPropagation()\r\n    event.preventDefault()\r\n    var reader = new FileReader();\r\n    reader.onload = function (event){\r\n      console.log(event.target.result);\r\n      var obj = JSON.parse(event.target.result);\r\n      console.log(obj)\r\n      setCert(obj)\r\n      setCertCount(Object.keys(obj.Certificate).length)\r\n    };\r\n    reader.readAsText(event.target.files[0]);\r\n    // setuploadfile(event.target.files[0])\r\n    // console.log(CryptoJS)\r\n  }\r\n\r\n  function captureVerifyFile (event) {\r\n    event.stopPropagation()\r\n    event.preventDefault()\r\n    var reader = new FileReader();\r\n    reader.onload =async function (event){\r\n      try{\r\n          var obj = JSON.parse(event.target.result);\r\n          // setReadObj(obj)\r\n          ////////////////////////\r\n          // decode the JWT's key\r\n          const rkey = await EthCrypto.decryptWithPrivateKey(\r\n            prikey, // privateKey\r\n            {\r\n              ciphertext:obj.decodeMessage.ciphertext,\r\n              ephemPublicKey:obj.decodeMessage.ephemPublicKey,\r\n              iv:obj.decodeMessage.iv,\r\n              mac:obj.decodeMessage.mac\r\n            }\r\n          );\r\n          // decode JWT\r\n          let Vlist =  await decryptJWEFILE(obj.jwt,rkey);\r\n          ////////////////////////\r\n          setVerify(Vlist)\r\n          setVerifyCount(Object.keys(Vlist.VerifyList).length)\r\n          if(Vlist.IPFSHash === \"None\"){\r\n            setType(1)\r\n          }\r\n          else{\r\n            setType(0)\r\n            // get file from ipfs\r\n            GetfileFromIPFS(Vlist.IPFSHash)\r\n          }\r\n      }catch(e){\r\n        alert(e.message)\r\n      }\r\n    };\r\n    reader.readAsText(event.target.files[0]);\r\n    // setuploadfile(event.target.files[0])\r\n    // console.log(CryptoJS)\r\n  }\r\n\r\n  async function GetVfileFromIPFS(){\r\n    let download = await window[\"ipfsget\"](V_IPFSHash,true)\r\n    var blob = new Blob(download[0], {type: \"text/plain\"});\r\n    \r\n    var reader = new FileReader();\r\n    reader.onload =async (event) => {\r\n      try{\r\n        var obj = JSON.parse(event.target.result);\r\n        // setReadObj(obj)\r\n        ////////////////////////\r\n        // decode the JWT's key\r\n        const rkey = await EthCrypto.decryptWithPrivateKey(\r\n          prikey, // privateKey\r\n          {\r\n            ciphertext:obj.decodeMessage.ciphertext,\r\n            ephemPublicKey:obj.decodeMessage.ephemPublicKey,\r\n            iv:obj.decodeMessage.iv,\r\n            mac:obj.decodeMessage.mac\r\n          }\r\n        );\r\n        // decode JWT\r\n        let Vlist =  await decryptJWEFILE(obj.jwt,rkey);\r\n        ////////////////////////\r\n        setVerify(Vlist)\r\n        setVerifyCount(Object.keys(Vlist.VerifyList).length)\r\n        if(Vlist.IPFSHash === \"None\"){\r\n          setType(1)\r\n        }\r\n        else{\r\n          setType(0)\r\n          // get file from ipfs\r\n          GetfileFromIPFS(Vlist.IPFSHash)\r\n        }\r\n    }catch(e){\r\n      alert(e.message)\r\n    }\r\n    };\r\n    reader.readAsBinaryString(blob);\r\n    \r\n  }\r\n\r\n  async function doVerification(){\r\n      if(!Certificate || !Verify){\r\n        alert(\"please upload file first\")\r\n        return;\r\n      }\r\n      setfilelist([])\r\n      let mapping = Certificate.Certificate\r\n      let flag = true;\r\n      Verify.VerifyList.forEach(async element => {\r\n        // console.log(element)\r\n        let key = \"0x\"+ CryptoJS.SHA256(element.key+element.random).toString()\r\n        // console.log(mapping[key])\r\n        let result = await VerifyCommitment(mapping[key],\"0x\"+ CryptoJS.SHA256(element.value).toString(),element.random)\r\n        // console.log(result)\r\n        if(result){\r\n          var r = new row(element.key,element.value,element.random,mapping[key],typeof element.value);\r\n          setfilelist( arr => [...arr, r]);\r\n        }\r\n        else{\r\n          flag = false\r\n        }\r\n      });\r\n      if(flag)\r\n        alert(\"Verification Success\")\r\n      else{\r\n        alert(\"Verification fail\")\r\n        setfilelist([])\r\n      }\r\n  }\r\n  async function VerifyCommitment(Commitment,C_value,C_random){\r\n    try{\r\n      let v  = await contract.methods.openCommitment(Commitment ,C_random,C_value).call();\r\n      return v\r\n    }\r\n    catch(e){\r\n      console.log(e)\r\n      return false\r\n    }\r\n  }\r\n\r\n  function CheckSignature(){\r\n    if(!Certificate){\r\n      alert(\"please upload Certificate first\")\r\n      return;\r\n    }\r\n    let V_Certificate = {\r\n      Certificate:Certificate.Certificate,\r\n      Issuer_address:Certificate.Issuer_address,\r\n      Receiver_address:Certificate.Receiver_address\r\n    }\r\n    let VerStr = JSON.stringify(V_Certificate)\r\n    web3.eth.personal.ecRecover(VerStr,Certificate.Issuer_signature)\r\n    .then((addr)=>{\r\n      // console.log(addr)\r\n      // console.log(Certificate.Issuer_address)\r\n      if(addr === Certificate.Issuer_address.toLowerCase()){\r\n        // console.log(Certificate.Issuer_address)\r\n        alert('Certificate Issuer : '+Certificate.Issuer_address +\"\\n\"\r\n             +'Certificate Signature : '+Certificate.Issuer_signature +\"\\n\"\r\n             +'Status : Pass')\r\n        //  history.push('/Upload')\r\n        \r\n      }\r\n    })\r\n  }\r\n\r\n  function handleCheckBox(position){\r\n    // console.log(position)\r\n    if(position > -1){\r\n    // let obj = filelist.indexOf(position)\r\n    // obj.share = !obj.share\r\n    const Updatelist = filelist.map((item,index)=>{\r\n      if(index === position){\r\n        let newrow = new row(item.key,item.value,item.random,item.Commitment,item.type,!item.share)\r\n        return newrow\r\n      }\r\n      else{\r\n        return item\r\n      }\r\n    }\r\n    );\r\n    setfilelist(Updatelist)\r\n    // console.log(filelist)\r\n    }\r\n  }\r\n\r\n  async function GenSelectiveVerification(){\r\n    // Verify List\r\n    let VerifyList = []\r\n    filelist.forEach(element => {\r\n      if(element.share){\r\n        let item = {\r\n          key:element.key,\r\n          value:element.value,\r\n          random:element.random\r\n        }\r\n        VerifyList.push(item)\r\n      }\r\n    });\r\n    if(VerifyList.length > 0){\r\n      let writeObj = {\r\n        IPFSHash:Verify.IPFSHash,\r\n        VerifyList:VerifyList\r\n      }\r\n\r\n    //encrypt JWT key\r\n    let key = crypto.randomBytes(32)\r\n    let VJwt =await encryptJWEFile(writeObj,key)\r\n    // console.log(key.toString('Hex'))\r\n    const encrypted = await EthCrypto.encryptWithPublicKey(\r\n      pubkey, //receiver publicKey\r\n      key.toString('Hex') // message\r\n    )\r\n\r\n    //\r\n    let exportObj = {\r\n      jwt:VJwt,\r\n      decodeMessage:encrypted\r\n    }\r\n      const fileData2 = JSON.stringify(exportObj);\r\n      const blob2 = new Blob([fileData2], {type: \"text/plain\"});\r\n    \r\n      if(V_IPFSorDownload){\r\n        let cid =await window[\"ipfsadd\"](blob2,true)\r\n        // console.log(cid)\r\n        setresult(cid)\r\n        alert(\"Verify has been published to IPFS,\\n IPFS Hash is \"+cid)\r\n      }\r\n      else{\r\n        const url2 = URL.createObjectURL(blob2);\r\n        const link2 = document.createElement('a');\r\n        link2.download = 'Verify.json';\r\n        link2.href = url2;\r\n        link2.click();\r\n      }\r\n    }\r\n    else{\r\n      alert(\"Nothing can share\")\r\n    }\r\n\r\n    setShow(false)\r\n  }\r\n  async function GetfileFromIPFS(ipfsHash){\r\n    let download = await window[\"ipfsget\"](ipfsHash,true)\r\n    var blob = new Blob(download[0], {type: \"text/plain\"});\r\n    \r\n    var reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      // console.log(event.target.result);\r\n      var obj = JSON.parse(event.target.result);\r\n      // console.log(obj)\r\n      setCert(obj)\r\n      setCertCount(Object.keys(obj.Certificate).length)\r\n    };\r\n    reader.readAsBinaryString(blob);\r\n    \r\n  }\r\n\r\n  function openRawVerifyfile(){\r\n    var newwin = window.open(\"/raw\");\r\n    newwin.document.write(\"<html><title>raw file</title><body>\"+JSON.stringify(Verify)+\"</body></html>\")\r\n  }\r\n\r\n  function ProveIsReceiver(){\r\n    if(!Certificate){\r\n      alert(\"please upload verify.json first!\")\r\n      return\r\n    }\r\n      let nonce = Math.floor(Math.random() * 1000000)\r\n    // let location = useLocation();\r\n    web3.eth.personal.sign(web3.utils.fromUtf8(`I am going to prove myself, one-time nonce: ${nonce}`), accounts[0], (err,sig)=>{\r\n      // console.log(sig)\r\n      web3.eth.personal.ecRecover(`I am going to prove myself, one-time nonce: ${nonce}`,sig)\r\n      .then((addr)=>{\r\n        // console.log(addr)\r\n        if(addr === Certificate.Receiver_address.toLowerCase()){\r\n           alert('the signer address is equal to receiver!')\r\n          //  history.push('/Upload')\r\n          \r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  async function decryptJWEFILE(jweObj,key){\r\n    let dec = didJWT.xc20pDirDecrypter(Buffer.from(key,'hex'))\r\n    let decoded =await didJWT.decryptJWE(jweObj,dec)\r\n    return J.decodeCleartext(decoded)\r\n  }\r\n\r\n  async function encryptJWEFile(payload,key){\r\n    let enc = didJWT.xc20pDirEncrypter(key);\r\n    let w = await J.prepareCleartext(payload)\r\n    let jwt = await didJWT.createJWE(w,[enc])\r\n    return jwt\r\n  }\r\n\r\n    return (\r\n      <>\r\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossOrigin=\"anonymous\" referrerPolicy=\"no-referrer\" />\r\n      <Container fluid style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n        {/* <Header></Header> */}\r\n        \r\n        <Modal show={show} onHide={()=>{setShow(false)}}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Let's Encrypted for your sharing target</Modal.Title>\r\n              </Modal.Header>\r\n            \r\n              <Modal.Body>\r\n                <PrivateKeyForm Title={\"Share Target's publicKey Key\"} privatekey={pubkey} setprivatekey={setpubKey} style={{ marginRight: 4 }}/>\r\n                <form className=\"Uploadform\">\r\n                  <label className=\"password\">Shared Verification Publish to IPFS(On)</label>\r\n                  <BootstrapSwitchButton checked={V_IPFSorDownload} onChange={()=>{setV_IPFSorDownload(!V_IPFSorDownload)}} onstyle=\"info\" onlabel=\"IPFS\" offlabel=\"Local\" width=\"100\"/>\r\n                  <br/>\r\n                </form>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n              <Button variant=\"secondary\" content='Upload' onClick = {GenSelectiveVerification}>Continue Generate Selective Verification</Button>\r\n              </Modal.Footer>\r\n        </Modal>\r\n        <Row>\r\n          <Col sm={9}>\r\n          <div className=\"App\">\r\n            <br/>\r\n                  <h2>Verify</h2>\r\n            <br/>\r\n            <h4>Verify Keys : TotalKeys = {VerifyCount} : {CertCount}</h4>\r\n            <Form>\r\n                <Form.Row>\r\n                    <Col></Col>\r\n                    <Col xs={1}>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {doVerification}>Verification</Button>\r\n                    </Col>\r\n                    <Col xs={3}>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {()=>{setShow(true)}}>Generate Selective Verification</Button>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Col></Col>\r\n                    <Col xs={4}>\r\n                      {(result)?\"Shared Verify JWE IPFS : \"+result:\"\"}\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Table striped bordered hover size=\"sm\" style = {{width :'85%',margin:\"auto\",marginTop : \"1%\"}}>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>key</th>\r\n                <th>value</th>\r\n                <th>Verification</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody >\r\n            {filelist.map((self,index) => <tr key={index}>\r\n                <td width=\"3%\">{index}</td>\r\n                {/* name */}\r\n                <td>{self.key}</td>\r\n                {/* type */}\r\n                <td>{self.value}</td>\r\n                {/* hash */}\r\n                <td width=\"35%\">\r\n                  {/* {console.log(index)} */}\r\n                  <Form.Check type=\"checkbox\" checked={self.share} label=\"Allow to Share\" onChange={()=>{handleCheckBox(index)}} /></td>\r\n              </tr>)}\r\n            </tbody>\r\n          </Table>\r\n          </div>\r\n          </Col>\r\n          <Col xs lg=\"2\">\r\n            <PrivateKeyForm Title={\"Opener private Key\"} privatekey={prikey} setprivatekey={setpriKey} style={{ marginRight: 4 }}/>\r\n            \r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">Upload Verify file or IPFSHash</label>\r\n              <BootstrapSwitchButton checked={V_IPFSorUPload} onChange={()=>{setV_IPFSorUPload(!V_IPFSorUPload)}} onstyle=\"info\" onlabel=\"IPFS\" offlabel=\"Upload\" width=\"100\"/>\r\n\r\n              {(V_IPFSorUPload)?\r\n                <>\r\n                  &nbsp;&nbsp;&nbsp;\r\n                  <Button variant=\"dark\" content='Upload' onClick = {GetVfileFromIPFS}>Get Verifiy file!</Button>\r\n                  <label className=\"password\">Verification IPFS Hash</label>\r\n                  <input type={type} className=\"password__input\" value={V_IPFSHash} onChange={(e)=>{setV_IPFSHash(e.target.value)}} />\r\n                </>:\r\n                <>\r\n                <label className=\"password\">Upload Verify file</label>\r\n                <input type=\"file\" onChange={captureVerifyFile} style={{ marginBottom: 4 }}/>\r\n                </>\r\n              }\r\n            </form>\r\n            {(type === 0)?<></>:\r\n            <form className=\"Uploadform\">\r\n            <Container>\r\n              <Row>\r\n                <label className=\"password\">Upload Certificate file</label>\r\n                <input type=\"file\" onChange={captureCertFile} style={{ marginBottom: 4 }}/>\r\n              </Row>\r\n              <Row>\r\n                <label className=\"password\">Certificate Issuer : </label>\r\n                <span>{(Certificate)?Certificate.Issuer_address:\"\"}</span>\r\n                <br/>\r\n              </Row>\r\n            </Container>\r\n            </form>\r\n            }\r\n\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">File Status</label>\r\n              Certificate:&nbsp;{(Certificate)? <Badge variant=\"success\">Load Success</Badge>:<Badge variant=\"danger\">No file</Badge>}\r\n              &nbsp;{(Verify)?<a href={\"https://ipfs.io/ipfs/\"+Verify.IPFSHash} target=\"_blank\" rel=\"noreferrer\" >View Raw</a>:\"\"}\r\n              <br/>\r\n              Verification:&nbsp;{(Verify)?<Badge variant=\"success\">Load Success</Badge>:<Badge variant=\"danger\">No file</Badge>}\r\n              &nbsp;{(Verify)?<a href=\"javascript:void(0)\" onClick={openRawVerifyfile}>View Raw</a>:\"\"}\r\n              <br/>\r\n              &nbsp;{(Verify)?<a href={\"https://ipfs.io/ipfs/\"+V_IPFSHash} target=\"_blank\" rel=\"noreferrer\" >View Raw JWT</a>:\"\"}\r\n            </form>\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">Functions</label>\r\n              <Row>\r\n              {(Certificate)?<Button variant=\"dark\" content='Upload' onClick = {CheckSignature}>Check Certificate Issuer's Signature</Button>:\"\"}\r\n              </Row>\r\n              <Row>\r\n                &nbsp;\r\n              </Row>\r\n              <Row>\r\n              {(Certificate)?<Button variant=\"dark\" content='Upload' onClick = {ProveIsReceiver}>Prove I'm the receiver</Button>:\"\"}\r\n              </Row>\r\n              <Row>\r\n                &nbsp;\r\n              </Row>\r\n              {/* <Row>\r\n              {(Certificate)?<Button variant=\"dark\" content='Upload' onClick = {doVerification}>Verify PedersenCommitments</Button>:\"\"}\r\n              </Row> */}\r\n            </form>\r\n          </Col>\r\n           \r\n        </Row>\r\n      </Container>\r\n      \r\n      \r\n      </>\r\n      );\r\n}\r\n\r\nexport default Verify;\r\n"],"sourceRoot":""}
{"version":3,"sources":["test/ipfs.js","components/DriveTable.js","pages/createCert.js","App.js","serviceWorker.js","index.js","components/privatekey.js","getWeb3.js","model/row.js","logo.svg","components/Header.js","pages/home.js","pages/verify.js"],"names":["IPFS","require","flag","a","create","ipfs","console","log","window","file","add","cid","toString","returnContent","get","type","path","content","chunk","push","DriveTable","props","Table","striped","bordered","hover","size","style","width","margin","marginTop","files","map","self","index","key","value","random","didJWT","crypto","J","CryptoJS","CreateCert","useState","web3","accounts","setaccount","contract","setcontract","uploadfile","setuploadfile","filelist","setfilelist","Key","setKey","Value","setValue","IPFSHash","setIPFSHash","address","setAddr","C_IPFSorDownload","setC_IPFSorDownload","V_IPFSorDownload","setV_IPFSorDownload","pubkey","setpubKey","result","setresult","UploadtoChain","VerifyIsIPFS","fileData","JSON","stringify","blob","Blob","GenVerifyJson","message","alert","generateHexString","length","ret","Math","substring","tempV","SHA256","GenPDCommitment","commitment","r","row","arr","C_value","C_random","methods","createCommitment","call","SignatureMap","forEach","element","Commitment","SignObj","Certificate","Issuer_address","Receiver_address","j","eth","personal","sign","utils","fromUtf8","err","sig","writeObj","Issuer_signature","Download","url","URL","createObjectURL","link","document","createElement","download","href","click","VerifyList","item","randomBytes","encryptJWEFile","VJwt","EthCrypto","encryptWithPublicKey","encrypted","exportObj","jwt","decodeMessage","fileData2","blob2","url2","link2","payload","enc","xc20pDirEncrypter","prepareCleartext","w","createJWE","useEffect","getAccounts","net","getId","i","Contract","PDContract","abi","error","fetchData","rel","integrity","crossOrigin","referrerPolicy","Container","fluid","paddingLeft","paddingRight","Row","Col","sm","className","color","Form","xs","Control","onChange","e","target","placeholder","Button","variant","onClick","lg","Title","privatekey","setprivatekey","marginRight","OnchangeInput","checked","onstyle","onlabel","offlabel","App","setweb3","getWeb3","networkId","instance","Navbar","bg","Brand","alt","src","ReactLogo","height","Nav","Item","to","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","PrivateKeyForm","settype","preventDefault","stopPropagation","Promise","resolve","reject","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","k","v","c","s","this","share","max","floor","Wallet","EthUtil","privateKeyToPublicKey","DidRegistryContract","Home","attibuteList","setAttr","Akey","setkey","Avalue","setvalue","prikey","setpriKey","setpubkey","Addr","setaddr","identityOwner","history","changed","previousChange","getPastEvents","filter","id","fromBlock","toBlock","events","obj","parse","array","Object","keys","event","returnValues","unshift","newList","cut","CutTailZero","name","nv","getIpfsHashFromBytes32","newrow","asciiToHex","hexToAscii","getBytes32FromIpfsHash","setAttribute","send","from","ipfsListing","bs58","decode","slice","bytes32Hex","hashHex","hashBytes","Buffer","encode","hex","str","l","code","parseInt","substr","String","fromCharCode","privateKeyBuffer","toBuffer","p","default","fromPrivateKey","getPublicKeyString","publicKey","addr","keccakFromHexString","Verify","setCert","setVerify","VerifyCount","setVerifyCount","CertCount","setCertCount","setType","show","setShow","V_IPFSorUPload","setV_IPFSorUPload","V_IPFSHash","setV_IPFSHash","setReadObj","reader","FileReader","onload","decryptWithPrivateKey","ciphertext","ephemPublicKey","iv","mac","rkey","decryptJWEFILE","Vlist","GetfileFromIPFS","readAsBinaryString","mapping","VerifyCommitment","openCommitment","ipfsHash","jweObj","dec","xc20pDirDecrypter","decryptJWE","decoded","decodeCleartext","onHide","Header","closeButton","Body","Footer","Check","label","position","Updatelist","handleCheckBox","readAsText","marginBottom","open","write","V_Certificate","VerStr","ecRecover","toLowerCase","nonce"],"mappings":"o99nBAAMA,EAAOC,EAAQ,K,4CACd,WAAqBC,GAArB,eAAAC,EAAA,yDACCD,EADD,iEAEgBF,EAAKI,SAFrB,OAEGC,EAFH,OAGHC,QAAQC,IAAI,eACZC,OAAM,KAAYH,EAJf,4C,kEAOA,WAAwBI,EAAKP,GAA7B,mBAAAC,EAAA,yDACCD,EADD,wDAEGG,EAAOG,OAAM,KAFhB,SAGmBH,EAAKK,IAAID,GAH5B,uBAGKE,EAHL,EAGKA,IAHL,kBAMIA,EAAIC,YANR,4C,kEASA,WAAuBD,EAAIT,GAA3B,+CAAAC,EAAA,yDACCD,EADD,iDAEGG,EAAOG,OAAM,KACfK,EAAgB,GAHjB,iCAIsBR,EAAKS,IAAIH,IAJ/B,8HAIcF,EAJd,EAKHH,QAAQC,IAAIE,EAAKM,KAAMN,EAAKO,MACvBP,EAAKQ,QANP,wDAOGA,EAAU,GAPb,kCAQuBR,EAAKQ,SAR5B,4HAQcC,EARd,EASCD,EAAQE,KAAKD,GATd,mTAWHZ,QAAQC,IAAIU,GAEZJ,EAAcM,KAAKF,GAbhB,wTAgBHX,QAAQC,IAAI,UAhBT,kBAiBIM,GAjBJ,uG,sBAqBPL,OAAM,QA9BC,SAAP,qCA+BAA,OAAM,QAtBC,SAAP,qCAuBAA,OAAM,SAvCC,SAAP,mC,+BC6BeY,MA3Bf,SAAoBC,GAChB,OACI,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAKC,MAAS,CAACC,MAAO,MAAMC,OAAO,OAAOC,UAAY,OACvF,+BACE,4BACE,iCACA,mCACA,qCACA,wCAGJ,+BACCT,EAAMU,MAAMC,KAAI,SAACC,EAAKC,GAAN,OAAgB,wBAAIC,IAAKD,GACtC,wBAAIN,MAAM,MAAMM,GAEhB,4BAAKD,EAAKE,KAEV,4BAAKF,EAAKG,OAEV,wBAAIR,MAAM,OAAOK,EAAKI,e,4HCV9BC,EAASrC,EAAQ,KACjBsC,EAAStC,EAAQ,KACjBuC,EAAIvC,EAAQ,KAEZwC,EAAWxC,EAAQ,KACKA,EAAQ,KA+VvByC,MA9Vf,SAAqBrB,GAEnB,MAAuBsB,mBAAStB,EAAMuB,MAAtC,mBAAOA,EAAP,KACA,GADA,KAC8BD,mBAAS,OAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA+BH,mBAAS,MAAxC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAAmCL,mBAAS,MAA5C,mBAAOM,EAAP,KAAkBC,EAAlB,KAEA,EAA+BP,oBAAS,GAAxC,mBACA,GADA,UAC+BA,mBAAS,KAAxC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAAqBT,mBAAS,IAA9B,mBAAOU,EAAP,KAAWC,EAAX,KACA,EAAyBX,mBAAS,IAAlC,mBAAOY,EAAP,KAAaC,EAAb,KAEA,EAA+Bb,mBAAS,IAAxC,mBAAOc,EAAP,KAAgBC,GAAhB,KACA,GAA0Bf,mBAAS,IAAnC,qBAAOgB,GAAP,MAAeC,GAAf,MACA,GAA+CjB,oBAAS,GAAxD,qBAAOkB,GAAP,MAAwBC,GAAxB,MACA,GAA+CnB,oBAAS,GAAxD,qBAAOoB,GAAP,MAAwBC,GAAxB,MACA,GAA2BrB,mBAAS,IAApC,qBAAOsB,GAAP,MAAcC,GAAd,MAEA,GAA2BvB,mBAAS,IAApC,qBAAOwB,GAAP,MAAcC,GAAd,MAlB0B,SAsDXC,GAtDW,iFAsD1B,WAA6BC,GAA7B,mBAAAnE,EAAA,0DAEO8C,IAAcF,EAFrB,iCAIcwB,EAAWC,KAAKC,UAAUxB,GAC1ByB,EAAO,IAAIC,KAAK,CAACJ,GAAW,CAACxD,KAAM,eALjD,SAMuBP,OAAM,QAAYkE,GAAK,GAN9C,OAMY/D,EANZ,OAOQL,QAAQC,IAAII,EAAIC,YAChB8C,GAAY/C,EAAIC,YAChBgE,GAAcjE,EAAIC,WAAW0D,GATrC,kDAYUhE,QAAQC,IAAI,KAAIsE,SAZ1B,gCAkBQvE,QAAQC,IAAI,oBACZuE,MAAM,oBAnBd,2DAtD0B,sBA+E1B,SAASC,GAAkBC,GAEzB,IADA,IAAIC,EAAM,GACHA,EAAID,OAASA,GAClBC,GAAOC,KAAK7C,SAASzB,SAAS,IAAIuE,UAAU,GAE9C,OAAOF,EAAIE,UAAU,EAAEH,GApFC,8CAuF1B,kCAAA7E,EAAA,yDAEMkD,GAAME,EAFZ,uBAGMuB,MAAM,8CAHZ,iCAMMM,EAAQ7B,EACO,iBAATA,IACPuB,MAAM,wBACNM,EAAO,KAAM3C,EAAS4C,OAAO9B,GAAO3C,YAEvCN,QAAQC,IAAI6E,GAER/C,EAAQ,KAAM0C,GAAkB,IAbtC,SAeyBO,GAAgBF,EAAM/C,GAf/C,OAeMkD,EAfN,OAkBMC,EAAI,IAAIC,IAAIpC,EAAIE,EAAMlB,EAAOkD,SAAkBhC,GACnDH,GAAa,SAAAsC,GAAG,4BAAQA,GAAR,CAAaF,OAC7BlC,EAAO,IACPE,EAAS,IArBX,6CAvF0B,+BA+GX8B,GA/GW,mFA+G1B,WAA+BK,EAAQC,GAAvC,eAAAzF,EAAA,+EAEyB4C,EAAS8C,QAAQC,iBAAiBF,EAASD,GAASI,OAF7E,cAEU5B,EAFV,OAGM7D,QAAQC,IAAI4D,GAHlB,kBAIaA,GAJb,gCAOQ7D,QAAQC,IAAR,MAPR,0DA/G0B,oEA2H1B,gCAAAJ,EAAA,sDAEMwD,IACFmB,MAAM,uCAEJkB,EAAe,GACnB7C,EAAS8C,SAAQ,SAAAC,GACf,IAAI/D,EAAM,KAAMM,EAAS4C,OAAOa,EAAQ/D,IAAI+D,EAAQ7D,QAAQzB,WAC5DoF,EAAa7D,GAAO+D,EAAQC,cAE1BC,EAAU,CACZC,YAAYL,EACZM,eAAezD,EAAS,GACxB0D,iBAAiB5C,IAEf6C,EAAIhC,KAAKC,UAAU2B,GACvB9F,QAAQC,IAAIiG,GACZ5D,EAAK6D,IAAIC,SAASC,KAAK/D,EAAKgE,MAAMC,SAASL,GAAI3D,EAAS,IAAI,SAACiE,EAAIC,GAC3DzG,QAAQC,IAAIwG,GACZ,IAAIC,EAAW,CACbX,YAAYL,EACZM,eAAezD,EAAS,GACxB0D,iBAAiB5C,GACjBsD,iBAAiBF,GAEnB7D,EAAc8D,MAzBtB,4CA3H0B,sBAuJ1B,SAASE,KACP,IAAM3C,EAAWC,KAAKC,UAAUxB,GAC1ByB,EAAO,IAAIC,KAAK,CAACJ,GAAW,CAACxD,KAAM,eACnCoG,EAAMC,IAAIC,gBAAgB3C,GAC1B4C,EAAOC,SAASC,cAAc,KACpCF,EAAKG,SAAW,mBAChBH,EAAKI,KAAOP,EACZG,EAAKK,QA9JmB,SAiKX/C,GAjKW,mFAiK1B,WAA6B5E,EAAKsE,GAAlC,mCAAAnE,EAAA,yDAEQ8D,GAFR,uBAGMa,MAAM,mCAHZ,iCAOQ8C,EAAa,GACjBzE,EAAS8C,SAAQ,SAAAC,GACf,IAAI2B,EAAO,CACT1F,IAAI+D,EAAQ/D,IACZC,MAAM8D,EAAQ9D,MACdC,OAAO6D,EAAQ7D,QAEjBuF,EAAWzG,KAAK0G,MAEdb,EAAW,CACbvD,SAASzD,EACT4H,WAAWA,GAGTzF,EAAMI,EAAOuF,YAAY,IArBjC,SAsBoBC,GAAef,EAAS7E,GAtB5C,cAsBQ6F,EAtBR,OAuBI1H,QAAQC,IAAI4B,EAAIvB,SAAS,QAvB7B,UAwB4BqH,IAAUC,qBAChCjE,GACA9B,EAAIvB,SAAS,QA1BnB,WAwBUuH,EAxBV,OA8BQC,EAAY,CACdC,IAAIL,EACJM,cAAcH,GAGVI,EAAY/D,KAAKC,UAAU2D,GAC3BI,EAAQ,IAAI7D,KAAK,CAAC4D,GAAY,CAACxH,KAAM,gBACxCuD,EArCP,kCAsCqB9D,OAAM,QAAYgI,GAAM,GAtC7C,QAsCU7H,EAtCV,OAuCML,QAAQC,IAAII,GACZyD,GAAUzD,GACVmE,MAAM,qDAAqDnE,GAzCjE,wBA4CY8H,EAAOrB,IAAIC,gBAAgBmB,IAC3BE,EAAQnB,SAASC,cAAc,MAC/BC,SAAW,cACjBiB,EAAMhB,KAAOe,EACbC,EAAMf,QAhDZ,6CAjK0B,+BAyNXI,GAzNW,mFAyN1B,WAA8BY,EAAQxG,GAAtC,mBAAAhC,EAAA,6DACMyI,EAAMtG,EAAOuG,kBAAkB1G,GADrC,SAEgBK,EAAEsG,iBAAiBH,GAFnC,cAEMI,EAFN,gBAGkBzG,EAAO0G,UAAUD,EAAE,CAACH,IAHtC,cAGMP,EAHN,yBAISA,GAJT,4CAzN0B,oEAgO1B,sBAAAlI,EAAA,sDACEG,QAAQC,IAAIsD,IACZvD,QAAQC,IAAIwD,IAGTA,GAEEF,GACCQ,IAAc,IAIhB6C,KAEAtC,GAAc,QAAO,IAKpBf,GACDQ,IAAc,IAGd6C,KACAtC,GAAc,QAAO,IAxB3B,4CAhO0B,sBA8P1B,OA1OAqE,qBAAU,WAAI,4CACZ,4BAAA9I,EAAA,kEAIQK,OAAOH,KAJf,gCAI0BG,OAAM,UAAa,GAJ7C,UAOQqC,EAPR,6BAOiBC,EAPjB,SAOkCF,EAAK6D,IAAIyC,cAP3C,2DAS4BtG,EAAK6D,IAAI0C,IAAIC,QATzC,eAYQrG,IACEsG,EAAI,IAAIzG,EAAK6D,IAAI6C,SACnBC,EAAWC,IAEX,8CAGFxG,EAAYqG,IAnBlB,kDAuBIvE,MAAM,0EAGNxE,QAAQmJ,MAAR,MA1BJ,2DADY,uBAAC,WAAD,wBA8BZC,MA4MG9G,EAID,oCACA,0BAAM+G,IAAI,aAAajC,KAAK,6EAA6EkC,UAAU,kGAAkGC,YAAY,YAAYC,eAAe,gBAC5P,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACrI,MAAO,CAAEsI,YAAa,EAAGC,aAAc,IAEtD,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACT,yBAAKC,UAAU,OACb,6BACM,oDACA,wBAAI3I,MAAO,CAAC4I,MAAM,QAAlB,eAGN,6BACA,sDACA,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKL,IAAN,KACI,kBAACC,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAKK,GAAI,GACT,kBAACD,EAAA,EAAKE,QAAN,CAAcJ,UAAU,UAAWlI,MAAOiB,EAAKsH,SAAU,SAAAC,GAAC,OAAItH,EAAOsH,EAAEC,OAAOzI,QAAQ0I,YAAY,SAElG,kBAACV,EAAA,EAAD,CAAKK,GAAI,GACT,kBAACD,EAAA,EAAKE,QAAN,CAAetI,MAAOmB,EAAOoH,SAAU,SAAAC,GAAC,OAAIpH,EAASoH,EAAEC,OAAOzI,QAAQ0I,YAAY,WAElF,kBAACV,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACM,EAAA,EAAD,CAAQC,QAAQ,YAAY/J,QAAQ,SAASgK,QA1RvC,6CA0R6D,uBAAGX,UAAU,kBAElF,kBAACF,EAAA,EAAD,CAAKK,GAAI,GACP,kBAACM,EAAA,EAAD,CAAQC,QAAQ,YAAY/J,QAAQ,SAASgK,QA7RvC,6CA6RN,kBAEF,kBAACb,EAAA,EAAD,QAGR,kBAAC,EAAD,CAAYrI,MAAOoB,MAGrB,kBAACiH,EAAA,EAAD,CAAKK,IAAE,EAACS,GAAG,KACT,kBAAC,IAAD,CAAgBC,MAAO,yBAA0BC,WAAYnH,GAAQoH,cAAenH,GAAWvC,MAAO,CAAE2J,YAAa,KACrH,0BAAMhB,UAAU,cACd,2BAAOA,UAAU,YAAjB,oBACA,kBAACE,EAAA,EAAKE,QAAN,CAAc3J,KAAK,OAAOqB,MAAOuB,GAASgH,SAAU,SAACC,IApFjE,SAAuBA,GACrBhH,GAAQgH,EAAEC,OAAOzI,OAmFmDmJ,CAAcX,IAAME,YAAY,aAE5F,0BAAMR,UAAU,cACd,kBAACP,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACI,2BAAOE,UAAU,YAAjB,mCACA,kBAAC,IAAD,CAAuBkB,QAAS3H,GAAkB8G,SAAU,WAAK7G,IAAqBD,KAAoB4H,QAAQ,OAAOC,QAAQ,OAAOC,SAAS,QAAQ/J,MAAM,QAC/J,+BAGN,kBAACuI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACI,2BAAOE,UAAU,YAAjB,8BACA,kBAAC,IAAD,CAAuBkB,QAASzH,GAAkB4G,SAAU,WAAK3G,IAAqBD,KAAoB0H,QAAQ,OAAOC,QAAQ,OAAOC,SAAS,QAAQ/J,MAAM,UAGrK,kBAACuI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6BACA,kBAACW,EAAA,EAAD,CAAQC,QAAQ,YAAY/J,QAAQ,SAASgK,QA7TvC,6CA6TN,mBACE9G,GAAQ,qBAAqBA,GAAO,KAY1C,kBAACgG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACI3G,EAAU,uBAAGiE,KAAM,wBAAwBjE,EAAUoH,OAAO,UAAlD,wBAAqF,WA7E5G,yEC1PM5K,EAAQ,KACKA,EAAQ,KA2HvB2L,MAzHf,SAAcvK,GACZ,MAAuBsB,mBAAS,MAAhC,mBAAOC,EAAP,KAAYiJ,EAAZ,KACA,EAA8BlJ,mBAAS,MAAvC,mBAAgBG,GAAhB,WACA,EAA+BH,mBAAS,MAAxC,mBAAgBK,GAAhB,WACA,EAA+BL,oBAAS,GAAxC,mBA8DA,OA9DA,UAEAsG,qBAAU,WAAI,4CACZ,kCAAA9I,EAAA,+EAGuB2L,cAHvB,UAGUlJ,EAHV,OAIQpC,OAAOH,KAJf,gCAI0BG,OAAM,UAAa,GAJ7C,cAKIqL,EAAQjJ,GALZ,UAO2BA,EAAK6D,IAAIyC,cAPpC,eAOUrG,EAPV,iBAS4BD,EAAK6D,IAAI0C,IAAIC,QATzC,QASU2C,EATV,OAUIzL,QAAQC,IAAIwL,GAENC,EAAW,IAAIpJ,EAAK6D,IAAI6C,SAC5BC,EAAWC,IAEX,8CAEF1G,EAAWD,GACXG,EAAYgJ,GAlBhB,kDAqBIlH,MAAM,0EAGNxE,QAAQmJ,MAAR,MAxBJ,2DADY,uBAAC,WAAD,wBA4BZC,MAgCG9G,EAKH,oCACA,0BAAM+G,IAAI,aAAajC,KAAK,wEAAwEkC,UAAU,0EAA0EC,YAAY,cACpM,kBAAC,IAAD,KACE,6BACA,kBAACoC,EAAA,EAAD,CAAQC,GAAG,OAAOlB,QAAQ,QACxB,kBAACiB,EAAA,EAAOE,MAAR,CAAczE,KAAK,KACjB,yBACE0E,IAAI,GACJC,IAAKC,IACL1K,MAAM,KACN2K,OAAO,KACPjC,UAAU,6BACT,IAPL,mBAUA,kBAACkC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,IAAI/K,MAAO,CAAC4I,MAAO,UAA5B,SAFN,WAKI,kBAACiC,EAAA,EAAIC,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,SAAS/K,MAAO,CAAC4I,MAAO,UAAjC,uBANN,WASI,kBAACiC,EAAA,EAAIC,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,SAAS/K,MAAO,CAAC4I,MAAO,UAAjC,yBAQN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOvJ,KAAK,UACV,kBAAC,EAAD,CAAY4B,KAAMA,KAEpB,kBAAC,IAAD,CAAO5B,KAAK,UACV,kBAAC,IAAD,CAAQ4B,KAAMA,KAEhB,kBAAC,IAAD,CAAO5B,KAAK,KACV,kBAAC,IAAD,CAAM4B,KAAMA,SA7Cb,yECjFS+J,QACW,cAA7BnM,OAAOoM,SAASC,UAEe,UAA7BrM,OAAOoM,SAASC,UAEhBrM,OAAOoM,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAKT,kBAAC,EAAD,MAAQzF,SAAS0F,eAAe,SDiH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6DElGJC,IA/Bf,SAAwBnM,GACpB,MAAuBsB,mBAAS,SAAhC,mBAAO5B,EAAP,KAAY0M,EAAZ,KAkBA,OACI,oCACA,0BAAMnD,UAAU,cAChB,2BAAOA,UAAU,YAAYjJ,EAAM8J,MACnC,2BAAOpK,KAAMA,EAAMuJ,UAAU,kBAAkBlI,MAAOf,EAAM+J,WAAYT,SAT5E,SAAuBC,GACnBvJ,EAAMgK,cAAcT,EAAEC,OAAOzI,UAS7B,0BAAMkI,UAAU,iBAAiBW,QArBrC,SAAkBL,GACdA,EAAE8C,iBACF9C,EAAE+C,kBAEEF,EADQ,UAAT1M,EACS,WAGA,WAckD,UAATA,EAAmB,OAAS,a,qGCY1E+K,IApCC,kBACd,IAAI8B,SAAQ,SAACC,EAASC,GAEpBtN,OAAOuN,iBAAiB,OAAxB,sBAAgC,kCAAA5N,EAAA,0DAE1BK,OAAOwN,SAFmB,wBAGtBpL,EAAO,IAAIqL,IAAKzN,OAAOwN,UAHD,kBAMpBxN,OAAOwN,SAASE,SANI,OAQ1BL,EAAQjL,GARkB,gDAU1BkL,EAAO,EAAD,IAVoB,gCAcrBtN,OAAOoC,MAERA,EAAOpC,OAAOoC,KACpBtC,QAAQC,IAAI,2BACZsN,EAAQjL,KAIFuL,EAAW,IAAIF,IAAKG,UAAUC,aAElC,iEAEIzL,EAAO,IAAIqL,IAAKE,GACtB7N,QAAQC,IAAI,gDACZsN,EAAQjL,IA5BoB,+D,uFCLf6C,E,WACjB,WAAY6I,EAAEC,EAAE/I,EAAEgJ,EAAEzN,GAAe,IAAV0N,IAAS,6EAC9BnO,QAAQC,IAAI+N,EAAEC,EAAE/I,EAAEgJ,GAClBE,KAAKvM,IAAMmM,EACXI,KAAKtM,MAAQmM,EACbG,KAAKrM,OAASmD,EACdkJ,KAAKvI,WAAaqI,EAClBE,KAAK3N,KAAOA,EACZ2N,KAAKC,MAAQF,E,gDAEjB,SAAaG,GACT,OAAO1J,KAAK2J,MAAM3J,KAAK7C,SAAWuM,O,uCCX3B,QAA0B,kC,qDCAzC,kC,gNCUIE,GADa7O,EAAQ,KACZA,EAAQ,MACjB8O,EAAU9O,EAAQ,MAChB+O,EAAwB/O,EAAQ,KAChCgP,EAAsBhP,EAAQ,MAyOrBiP,IAxOf,SAAe7N,GACX,MAAuBsB,mBAAStB,EAAMuB,MAAtC,mBAAOA,EAAP,KACA,GADA,KAC8BD,mBAAS,OAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA+BH,mBAAS,MAAxC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA+BL,mBAAS,IAAxC,mBAAOwM,EAAP,KAAoBC,EAApB,KACA,EAAsBzM,mBAAS,IAA/B,mBAAO0M,EAAP,KAAYC,EAAZ,KACA,EAA0B3M,mBAAS,IAAnC,mBAAO4M,EAAP,KAAcC,EAAd,KACA,EAA2B7M,mBAAS,IAApC,mBAAO8M,EAAP,KAAcC,EAAd,KACA,EAA2B/M,mBAAS,IAApC,mBAAOsB,EAAP,KAAc0L,EAAd,KACA,EAAuBhN,mBAAS,IAAhC,mBAAOiN,EAAP,KAAYC,EAAZ,KATkB,4CA4ClB,8BAAA1P,EAAA,sEACqB4C,EAAS8C,QAAQiK,cAAcjN,EAAS,IAAIkD,OADjE,qBAEEzF,QAAQC,IAAIwC,GACNgN,EAAU,GAHlB,SAI6BhN,EAAS8C,QAAQmK,QAAQnN,EAAS,IAAIkD,OAJnE,OAIMkK,EAJN,kBAMSA,EANT,oBAOyB,GAAlBA,EAPP,sEAQYlN,EAASmN,cAAc,sBAAuB,CAClDC,OAAQ,CAACC,GAAI,CAACvN,EAAS,KACvBwN,UAAWJ,EACXK,QAASL,IACR,SAACxG,EAAO8G,GAET,GAAK9G,EAUHnJ,QAAQC,IAAIkJ,OAVH,CACT,IAAI+G,EAAIhM,KAAKiM,MAAMjM,KAAKC,UAAU8L,IAC9BG,EAAQC,OAAOC,KAAKJ,GACxB,IAAI,IAAItO,KAASwO,EAAM,CACrB,IAAIG,EAAQL,EAAIE,EAAMxO,IAAQ4O,aAC9Bf,EAAQgB,QAAQF,GAChBZ,EAAiBY,EAAMZ,oBApBnC,+BA2BEb,GAAQ,SAAAD,GAAY,OAAIY,KACxBzP,QAAQC,IAAIwP,GA5Bd,6CA5CkB,oEA2ElB,4BAAA5P,EAAA,sDAC4B,GAAvBgP,EAAanK,QACdF,MAAM,iCAEJkM,EAAU,GACd7B,EAAalJ,QAAb,+BAAA9F,EAAA,MAAqB,WAAMsF,GAAN,mBAAAtF,EAAA,sDACnBG,QAAQC,IAAIkF,EAAIrD,OACZ6O,EAAMC,GAAYzL,EAAI0L,MACtBC,EAAKC,GAAuB5L,EAAIrD,OACpC9B,QAAQC,IAAI6Q,GACRE,EAAS,CACXH,KAAMF,EACN7O,MAAMgP,EACNnB,eAAexK,EAAIwK,gBAErBe,EAAQ7P,KAAKmQ,GAEflC,GAAQ,SAAAD,GAAY,OAAI6B,KAZH,2CAArB,uDALF,4CA3EkB,oEAgGlB,8BAAA7Q,EAAA,6DACMgR,EAAOvO,EAAKgE,MAAM2K,WAAWlC,GACjC/O,QAAQC,IAAIqC,EAAKgE,MAAM4K,WAAWL,IAFpC,SAGmBM,GAAuBlC,GAH1C,cAGMnN,EAHN,OAIE9B,QAAQC,IAAI8Q,GAAuBjP,IACnC9B,QAAQC,IAAI4Q,EAAK/O,GALnB,SAMQW,EAAS8C,QAAQ6L,aAAa7O,EAAS,GAAIsO,EAAM/O,EAAO,WAAWuP,KAAK,CAAEC,KAAM/O,EAAS,KANjG,4CAhGkB,+BAyGH4O,GAzGG,iFAyGlB,WAAsCI,GAAtC,SAAA1R,EAAA,+EACS,KAAK2R,IAAKC,OAAOF,GAAaG,MAAM,GAAGpR,SAAS,QADzD,4CAzGkB,sBA6GlB,SAASyQ,GAAuBY,GAI9B,IAAMC,EAAU,OAASD,EAAWD,MAAM,GACpCG,EAAYC,EAAOR,KAAKM,EAAS,OAEvC,OADgBJ,IAAKO,OAAOF,GAI9B,SAASjB,GAAYoB,GACnB,IAAIC,EAAM,GACNlJ,EAAI,EAAGmJ,EAAIF,EAAItN,OAInB,IAH4B,OAAxBsN,EAAInN,UAAU,EAAG,KACnBkE,EAAI,GAECA,EAAImJ,EAAGnJ,GAAG,EAAG,CAClB,IAAIoJ,EAAOC,SAASJ,EAAIK,OAAOtJ,EAAG,GAAI,IAC3B,GAARoJ,IACDF,GAAOK,OAAOC,aAAaJ,IAI/B,OAAOF,EA0BT,OAnJAtJ,qBAAU,WAAI,4CACZ,4BAAA9I,EAAA,kEAIQK,OAAOH,KAJf,gCAI0BG,OAAM,UAAa,GAJ7C,UAOQqC,EAPR,6BAOiBC,EAPjB,SAOkCF,EAAK6D,IAAIyC,cAP3C,2DAS4BtG,EAAK6D,IAAI0C,IAAIC,QATzC,eAYQrG,IACEsG,EAAI,IAAIzG,EAAK6D,IAAI6C,SACnB2F,EAAoBzF,IAEpB,8CAGFxG,EAAYqG,IAnBlB,kDAuBIvE,MAAM,0EAGNxE,QAAQmJ,MAAR,MA1BJ,2DADY,uBAAC,WAAD,wBA8BZC,MAsHA,oCACA,0BAAMC,IAAI,aAAajC,KAAK,6EAA6EkC,UAAU,kGAAkGC,YAAY,YAAYC,eAAe,gBAC5P,kBAAC,IAAD,CAAWE,OAAK,EAACrI,MAAO,CAAEsI,YAAa,EAAGC,aAAc,IAEtD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,GAAI,GACT,yBAAKC,UAAU,OACb,6BACM,oCACN,6BACA,8CACA,6BACA,kBAAC,IAAD,CAAQU,QAAQ,YAAY/J,QAAQ,SAASgK,QA3KnC,4CA2KV,sBANF,OAQE,kBAAC,IAAD,CAAQD,QAAQ,YAAY/J,QAAQ,SAASgK,QA7KnC,6CA6KV,2BAEA,kBAAC,IAAD,CAAO1J,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAKC,MAAS,CAACC,MAAO,MAAMC,OAAO,OAAOC,UAAY,OACvF,+BACE,4BACE,iCACA,mCACA,qCACA,gDAGJ,+BACCqN,EAAanN,KAAI,SAACC,EAAKC,GAAN,OAAgB,wBAAIC,IAAKD,GACvC,wBAAIN,MAAM,MAAMM,GAEhB,4BAAKD,EAAKkP,MAEV,4BAAKlP,EAAKG,OAEV,4BAAKH,EAAKgO,wBAMlB,kBAAC,IAAD,CAAKxF,IAAE,EAACS,GAAG,KAET,0BAAMZ,UAAU,cACd,2BAAOA,UAAU,YAAjB,kCACA,uBAAG5C,KAAK,uFAAuFmD,OAAO,UAAtG,gBAEF,0BAAMP,UAAU,cACd,2BAAOA,UAAU,YAAjB,iBACA,kBAAC,IAAKI,QAAN,CAAc3J,KAAK,OAAO4J,SAvEpC,SAAqBC,GACnB0E,EAAO1E,EAAEC,OAAOzI,QAsE0C0I,YAAY,eAC9D,6BACA,kBAAC,IAAKJ,QAAN,CAAc3J,KAAK,OAAO4J,SArEpC,SAAuBC,GACrB4E,EAAS5E,EAAEC,OAAOzI,QAoE0C0I,YAAY,iBAChE,6BACA,kBAAC,IAAD,CAAQE,QAAQ,YAAY/J,QAAQ,SAASgK,QAlNrC,6CAkNR,kBAEF,0BAAMX,UAAU,cACd,2BAAOA,UAAU,YAAjB,cACA,2BAAOvJ,KAAK,OAAOuJ,UAAU,kBAAkBlI,MAAOqN,EAAQ9E,SAAU,SAACC,GAAK8E,EAAU9E,EAAEC,OAAOzI,UACjG,0BAAMkI,UAAU,iBAAiBW,QAxE3C,WAEE,IAAM6H,EAAmB/D,EAAQgE,SAAS,KAAKtD,GAI3CuD,EAHWlE,EAAOmE,QAAQC,eAAeJ,GAG9BK,qBACTC,EAAYpE,EAAsBS,GAAQ7O,SAAS,OACzD+O,EAAUyD,GAGV,IAAIC,EAAOtE,EAAQuE,oBAAoBN,GACvCK,EAAO,KAAMA,EAAKzS,SAAS,MAAM,GAAG,IACpCiP,EAAQwD,KA2DA,SAEA,2BAAO/I,UAAU,YAAjB,cACA,8BAAOrG,GACP,2BAAOqG,UAAU,YAAjB,WACA,8BAAOsF,W,wRC7NftN,EAASrC,EAAQ,KACjBsC,EAAStC,EAAQ,KACjBuC,EAAIvC,EAAQ,KAEZwC,EAAWxC,EAAQ,KACKA,EAAQ,KA0fvBsT,IAzff,SAAiBlS,GACf,MAAuBsB,mBAAStB,EAAMuB,MAAtC,mBAAOA,EAAP,KACA,GADA,KAC8BD,mBAAS,OAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA+BH,mBAAS,MAAxC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA8BL,mBAAS,MAAvC,mBAAO0D,EAAP,KAAmBmN,EAAnB,KACA,EAA2B7Q,mBAAS,MAApC,mBAAO4Q,EAAP,KAAcE,EAAd,KACA,EAA+B9Q,mBAAS,IAAxC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACA,EAAqCT,mBAAS,GAA9C,mBAAO+Q,EAAP,KAAmBC,EAAnB,KACA,EAAiChR,mBAAS,GAA1C,mBAAOiR,GAAP,KAAiBC,GAAjB,KACA,GAAuBlR,mBAAS,GAAhC,qBAAO5B,GAAP,MAAY+S,GAAZ,MACA,GAAuBnR,oBAAS,GAAhC,qBAAOoR,GAAP,MAAYC,GAAZ,MACA,GAA6BrR,mBAAS,GAAtC,qBACA,IADA,YAC2BA,mBAAS,KAApC,qBAAO8M,GAAP,MAAcC,GAAd,MACA,GAA2B/M,mBAAS,IAApC,qBAAOsB,GAAP,MAAcC,GAAd,MACA,GAA+CvB,oBAAS,GAAxD,qBAAOoB,GAAP,MAAwBC,GAAxB,MACA,GAA2CrB,oBAAS,GAApD,qBAAOsR,GAAP,MAAsBC,GAAtB,MACA,GAAmCvR,mBAAS,IAA5C,qBAAOwR,GAAP,MAAkBC,GAAlB,MACA,GAA6BzR,mBAAS,MAAtC,qBAAe0R,IAAf,aACA,GAA2B1R,mBAAS,IAApC,qBAAOwB,GAAP,MAAcC,GAAd,MAlBsB,8CAuHtB,gCAAAjE,EAAA,sEACuBK,OAAM,QAAY2T,IAAW,GADpD,OACM1M,EADN,OAEM/C,EAAO,IAAIC,KAAK8C,EAAS,GAAI,CAAC1G,KAAM,gBAEpCuT,EAAS,IAAIC,YACVC,OAAP,uCAAe,WAAO3D,GAAP,mBAAA1Q,EAAA,sEAEPqQ,EAAMhM,KAAKiM,MAAMI,EAAMhG,OAAO1G,QAClCkQ,GAAW7D,GAHA,SAMQvI,IAAUwM,sBAC3BhF,GACA,CACEiF,WAAWlE,EAAIlI,cAAcoM,WAC7BC,eAAenE,EAAIlI,cAAcqM,eACjCC,GAAGpE,EAAIlI,cAAcsM,GACrBC,IAAIrE,EAAIlI,cAAcuM,MAZf,cAMLC,EANK,gBAgBQC,GAAevE,EAAInI,IAAIyM,GAhB/B,OAgBPE,EAhBO,OAkBXvB,EAAUuB,GACVrB,EAAehD,OAAOC,KAAKoE,EAAMpN,YAAY5C,QACxB,QAAlBgQ,EAAMvR,SACPqQ,GAAQ,IAGRA,GAAQ,GAERmB,GAAgBD,EAAMvR,WA1Bb,kDA6BbqB,MAAM,KAAED,SA7BK,0DAAf,sDAgCAyP,EAAOY,mBAAmBxQ,GArC5B,4CAvHsB,oEAgKtB,8BAAAvE,EAAA,yDACQkG,GAAgBkN,EADxB,uBAEMzO,MAAM,4BAFZ,0BAKI1B,EAAY,IACR+R,EAAU9O,EAAYA,YACtBnG,GAAO,EACXqT,EAAO3L,WAAW3B,QAAlB,uCAA0B,WAAMC,GAAN,mBAAA/F,EAAA,6DACxBG,QAAQC,IAAI2F,GACR/D,EAAM,KAAMM,EAAS4C,OAAOa,EAAQ/D,IAAI+D,EAAQ7D,QAAQzB,WAC5DN,QAAQC,IAAI4U,EAAQhT,IAHI,SAILiT,GAAiBD,EAAQhT,GAAK,KAAMM,EAAS4C,OAAOa,EAAQ9D,OAAOxB,WAAWsF,EAAQ7D,QAJjF,OAIpB8B,EAJoB,OAKxB7D,QAAQC,IAAI4D,GACTA,GACGqB,EAAI,IAAIC,IAAIS,EAAQ/D,IAAI+D,EAAQ9D,MAAM8D,EAAQ7D,OAAO8S,EAAQhT,UAAY+D,EAAQ9D,OACrFgB,GAAa,SAAAsC,GAAG,4BAAQA,GAAR,CAAaF,QAG7BtF,GAAO,EAXe,2CAA1B,uDAcGA,EACD4E,MAAM,yBAENA,MAAM,qBACN1B,EAAY,KA1BlB,4CAhKsB,+BA6LPgS,GA7LO,qFA6LtB,WAAgCjP,EAAWR,EAAQC,GAAnD,eAAAzF,EAAA,+EAEmB4C,EAAS8C,QAAQwP,eAAelP,EAAYP,EAASD,GAASI,OAFjF,cAEQwI,EAFR,yBAGWA,GAHX,uCAMIjO,QAAQC,IAAR,MANJ,mBAOW,GAPX,0DA7LsB,oEAsPtB,gDAAAJ,EAAA,yDAEMyH,EAAa,GACjBzE,EAAS8C,SAAQ,SAAAC,GACf,GAAGA,EAAQyI,MAAM,CACf,IAAI9G,EAAO,CACT1F,IAAI+D,EAAQ/D,IACZC,MAAM8D,EAAQ9D,MACdC,OAAO6D,EAAQ7D,QAEjBuF,EAAWzG,KAAK0G,SAGjBD,EAAW5C,OAAS,GAbzB,wBAcQgC,EAAW,CACbvD,SAAS8P,EAAO9P,SAChBmE,WAAWA,GAIXzF,EAAMI,EAAOuF,YAAY,IApB/B,SAqBkBC,GAAef,EAAS7E,GArB1C,cAqBM6F,EArBN,OAsBE1H,QAAQC,IAAI4B,EAAIvB,SAAS,QAtB3B,UAuB0BqH,IAAUC,qBAChCjE,GACA9B,EAAIvB,SAAS,QAzBjB,WAuBQuH,EAvBR,OA6BMC,EAAY,CACdC,IAAIL,EACJM,cAAcH,GAERI,EAAY/D,KAAKC,UAAU2D,GAC3BI,EAAQ,IAAI7D,KAAK,CAAC4D,GAAY,CAACxH,KAAM,gBAExCgD,GApCP,kCAqCqBvD,OAAM,QAAYgI,GAAM,GArC7C,QAqCU7H,EArCV,OAsCML,QAAQC,IAAII,GACZyD,GAAUzD,GACVmE,MAAM,qDAAqDnE,GAxCjE,wBA2CY8H,EAAOrB,IAAIC,gBAAgBmB,IAC3BE,EAAQnB,SAASC,cAAc,MAC/BC,SAAW,cACjBiB,EAAMhB,KAAOe,EACbC,EAAMf,QA/CZ,gCAmDI7C,MAAM,qBAnDV,QAsDEkP,IAAQ,GAtDV,6CAtPsB,+BA8SPiB,GA9SO,iFA8StB,WAA+BK,GAA/B,mBAAAnV,EAAA,sEACuBK,OAAM,QAAY8U,GAAS,GADlD,OACM7N,EADN,OAEM/C,EAAO,IAAIC,KAAK8C,EAAS,GAAI,CAAC1G,KAAM,gBAEpCuT,EAAS,IAAIC,YACVC,OAAS,SAAC3D,GACfvQ,QAAQC,IAAIsQ,EAAMhG,OAAO1G,QACzB,IAAIqM,EAAMhM,KAAKiM,MAAMI,EAAMhG,OAAO1G,QAClC7D,QAAQC,IAAIiQ,GACZgD,EAAQhD,GACRqD,GAAalD,OAAOC,KAAKJ,EAAInK,aAAarB,SAE5CsP,EAAOY,mBAAmBxQ,GAZ5B,4CA9SsB,+BAwVPqQ,GAxVO,mFAwVtB,WAA8BQ,EAAOpT,GAArC,iBAAAhC,EAAA,6DACMqV,EAAMlT,EAAOmT,kBAAkBrD,EAAOR,KAAKzP,EAAI,QADrD,SAEqBG,EAAOoT,WAAWH,EAAOC,GAF9C,cAEMG,EAFN,yBAGSnT,EAAEoT,gBAAgBD,IAH3B,4CAxVsB,+BA8VP5N,GA9VO,mFA8VtB,WAA8BY,EAAQxG,GAAtC,mBAAAhC,EAAA,6DACMyI,EAAMtG,EAAOuG,kBAAkB1G,GADrC,SAEgBK,EAAEsG,iBAAiBH,GAFnC,cAEMI,EAFN,gBAGkBzG,EAAO0G,UAAUD,EAAE,CAACH,IAHtC,cAGMP,EAHN,yBAISA,GAJT,4CA9VsB,sBAqWpB,OAzUFY,qBAAU,WAAI,4CACZ,4BAAA9I,EAAA,kEAIQK,OAAOH,KAJf,gCAI0BG,OAAM,UAAa,GAJ7C,UAOQqC,EAPR,6BAOiBC,EAPjB,SAOkCF,EAAK6D,IAAIyC,cAP3C,2DAS4BtG,EAAK6D,IAAI0C,IAAIC,QATzC,eAYQrG,IACEsG,EAAI,IAAIzG,EAAK6D,IAAI6C,SACnBC,EAAWC,IAEX,8CAGFxG,EAAYqG,IAnBlB,kDAuBIvE,MAAM,0EAGNxE,QAAQmJ,MAAR,MA1BJ,2DADY,uBAAC,WAAD,wBA8BZC,MA4SE,oCACA,0BAAMC,IAAI,aAAajC,KAAK,6EAA6EkC,UAAU,kGAAkGC,YAAY,YAAYC,eAAe,gBAC5P,kBAAC,IAAD,CAAWE,OAAK,EAACrI,MAAO,CAAEsI,YAAa,EAAGC,aAAc,IAGtD,kBAAC,IAAD,CAAO6J,KAAMA,GAAM8B,OAAQ,WAAK7B,IAAQ,KAClC,kBAAC,IAAM8B,OAAP,CAAcC,aAAW,GACvB,kBAAC,IAAM5K,MAAP,iDAGF,kBAAC,IAAM6K,KAAP,KACE,kBAAC,IAAD,CAAgB7K,MAAO,+BAAgCC,WAAYnH,GAAQoH,cAAenH,GAAWvC,MAAO,CAAE2J,YAAa,KAC3H,0BAAMhB,UAAU,cACd,2BAAOA,UAAU,YAAjB,2CACA,kBAAC,IAAD,CAAuBkB,QAASzH,GAAkB4G,SAAU,WAAK3G,IAAqBD,KAAoB0H,QAAQ,OAAOC,QAAQ,OAAOC,SAAS,QAAQ/J,MAAM,QAC/J,+BAGJ,kBAAC,IAAMqU,OAAP,KACA,kBAAC,IAAD,CAAQjL,QAAQ,YAAY/J,QAAQ,SAASgK,QAzXnC,6CAyXV,8CAGN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKZ,GAAI,GACT,yBAAKC,UAAU,OACb,6BACM,sCACN,6BACA,yDAA+BoJ,EAA/B,MAA+CE,IAC/C,kBAAC,IAAD,KACI,kBAAC,IAAKzJ,IAAN,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKM,GAAI,GACP,kBAAC,IAAD,CAAQO,QAAQ,YAAY/J,QAAQ,SAASgK,QAvY3C,6CAuYF,iBAEF,kBAAC,IAAD,CAAKR,GAAI,GACP,kBAAC,IAAD,CAAQO,QAAQ,YAAY/J,QAAQ,SAASgK,QAAW,WAAK+I,IAAQ,KAArE,oCAEF,kBAAC,IAAD,OAEJ,kBAAC,IAAK7J,IAAN,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKM,GAAI,GACLtG,GAAQ,4BAA4BA,GAAO,IAE/C,kBAAC,IAAD,QAGR,kBAAC,IAAD,CAAO5C,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAKC,MAAS,CAACC,MAAO,MAAMC,OAAO,OAAOC,UAAY,OACzF,+BACE,4BACE,iCACA,mCACA,qCACA,8CAGJ,+BACCqB,EAASnB,KAAI,SAACC,EAAKC,GAAN,OAAgB,wBAAIC,IAAKD,GACnC,wBAAIN,MAAM,MAAMM,GAEhB,4BAAKD,EAAKE,KAEV,4BAAKF,EAAKG,OAEV,wBAAIR,MAAM,OACPtB,QAAQC,IAAI2B,GACb,kBAAC,IAAKgU,MAAN,CAAYnV,KAAK,WAAWyK,QAASvJ,EAAK0M,MAAOwH,MAAM,iBAAiBxL,SAAU,YAvMlG,SAAwByL,GAEtB,GADA9V,QAAQC,IAAI6V,GACTA,GAAY,EAAE,CAGjB,IAAMC,EAAalT,EAASnB,KAAI,SAAC6F,EAAK3F,GACpC,OAAGA,IAAUkU,EACE,IAAI3Q,IAAIoC,EAAK1F,IAAI0F,EAAKzF,MAAMyF,EAAKxF,OAAOwF,EAAK1B,WAAW0B,EAAK9G,MAAM8G,EAAK8G,OAI9E9G,KAIXzE,EAAYiT,GACZ/V,QAAQC,IAAI4C,IAuLyFmT,CAAepU,eAM9G,kBAAC,IAAD,CAAKuI,IAAE,EAACS,GAAG,KACT,kBAAC,IAAD,CAAgBC,MAAO,qBAAsBC,WAAYqE,GAAQpE,cAAeqE,GAAW/N,MAAO,CAAE2J,YAAa,KAEjH,0BAAMhB,UAAU,cACd,2BAAOA,UAAU,YAAjB,kCACA,kBAAC,IAAD,CAAuBkB,QAASyI,GAAgBtJ,SAAU,WAAKuJ,IAAmBD,KAAkBxI,QAAQ,OAAOC,QAAQ,OAAOC,SAAS,SAAS/J,MAAM,QAExJqS,GACA,mDAEE,kBAAC,IAAD,CAAQjJ,QAAQ,OAAO/J,QAAQ,SAASgK,QAzblC,6CAybN,qBACA,2BAAOX,UAAU,YAAjB,0BACA,2BAAOvJ,KAAMA,GAAMuJ,UAAU,kBAAkBlI,MAAO+R,GAAYxJ,SAAU,SAACC,GAAKwJ,GAAcxJ,EAAEC,OAAOzI,WAE3G,oCACA,2BAAOkI,UAAU,YAAjB,sBACA,2BAAOvJ,KAAK,OAAO4J,SAjXjC,SAA4BkG,GAC1BA,EAAMlD,kBACNkD,EAAMnD,iBACN,IAAI4G,EAAS,IAAIC,WACjBD,EAAOE,OAAP,uCAAe,WAAgB3D,GAAhB,mBAAA1Q,EAAA,sEAELqQ,EAAMhM,KAAKiM,MAAMI,EAAMhG,OAAO1G,QAClCkQ,GAAW7D,GAHF,SAMUvI,IAAUwM,sBAC3BhF,GACA,CACEiF,WAAWlE,EAAIlI,cAAcoM,WAC7BC,eAAenE,EAAIlI,cAAcqM,eACjCC,GAAGpE,EAAIlI,cAAcsM,GACrBC,IAAIrE,EAAIlI,cAAcuM,MAZjB,cAMHC,EANG,gBAgBUC,GAAevE,EAAInI,IAAIyM,GAhBjC,OAgBLE,EAhBK,OAkBTvB,EAAUuB,GACVrB,EAAehD,OAAOC,KAAKoE,EAAMpN,YAAY5C,QACxB,QAAlBgQ,EAAMvR,SACPqQ,GAAQ,IAGRA,GAAQ,GAERmB,GAAgBD,EAAMvR,WA1Bf,kDA6BXqB,MAAM,KAAED,SA7BG,0DAAf,sDAgCAyP,EAAOiC,WAAW1F,EAAMhG,OAAO9I,MAAM,KA6UuBJ,MAAO,CAAE6U,aAAc,OAIjE,GAARzV,GAAW,qCACb,0BAAMuJ,UAAU,cAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,2BAAOA,UAAU,YAAjB,2BACA,2BAAOvJ,KAAK,OAAO4J,SA1YjC,SAA0BkG,GACxBA,EAAMlD,kBACNkD,EAAMnD,iBACN,IAAI4G,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAU3D,GACxBvQ,QAAQC,IAAIsQ,EAAMhG,OAAO1G,QACzB,IAAIqM,EAAMhM,KAAKiM,MAAMI,EAAMhG,OAAO1G,QAClC7D,QAAQC,IAAIiQ,GACZgD,EAAQhD,GACRqD,GAAalD,OAAOC,KAAKJ,EAAInK,aAAarB,SAE5CsP,EAAOiC,WAAW1F,EAAMhG,OAAO9I,MAAM,KA+XqBJ,MAAO,CAAE6U,aAAc,MAEvE,kBAAC,IAAD,KACE,2BAAOlM,UAAU,YAAjB,yBACA,8BAAQjE,EAAaA,EAAYC,eAAe,IAChD,gCAMJ,0BAAMgE,UAAU,cACd,2BAAOA,UAAU,YAAjB,eADF,mBAEsBjE,EAAc,kBAAC,IAAD,CAAO2E,QAAQ,WAAf,gBAA8C,kBAAC,IAAD,CAAOA,QAAQ,UAAf,WAFlF,OAGUuI,EAAQ,uBAAG7L,KAAM,wBAAwB6L,EAAO9P,SAAUoH,OAAO,UAAzD,YAAgF,GAChG,6BAJF,oBAKuB0I,EAAQ,kBAAC,IAAD,CAAOvI,QAAQ,WAAf,gBAA8C,kBAAC,IAAD,CAAOA,QAAQ,UAAf,WAL7E,OAMUuI,EAAQ,uBAAG7L,KAAK,qBAAqBuD,QA3JzD,WACezK,OAAOiW,KAAK,QAClBlP,SAASmP,MAAM,sCAAsClS,KAAKC,UAAU8O,GAAQ,oBAyJzD,YAAsE,GACtF,6BAPF,OAQUA,EAAQ,uBAAG7L,KAAM,wBAAwByM,GAAYtJ,OAAO,UAApD,gBAA+E,IAEjG,0BAAMP,UAAU,cACd,2BAAOA,UAAU,YAAjB,aACA,kBAAC,IAAD,KACEjE,EAAa,kBAAC,IAAD,CAAQ2E,QAAQ,OAAO/J,QAAQ,SAASgK,QAxRnE,WACE,GAAI5E,EAAJ,CAIA,IAAIsQ,EAAgB,CAClBtQ,YAAYA,EAAYA,YACxBC,eAAeD,EAAYC,eAC3BC,iBAAiBF,EAAYE,kBAE3BqQ,EAASpS,KAAKC,UAAUkS,GAC5B/T,EAAK6D,IAAIC,SAASmQ,UAAUD,EAAOvQ,EAAYY,kBAC9CoG,MAAK,SAACgG,GACL/S,QAAQC,IAAI8S,GACZ/S,QAAQC,IAAI8F,EAAYC,gBACrB+M,IAAShN,EAAYC,eAAewQ,gBACrCxW,QAAQC,IAAI8F,EAAYC,gBACxBxB,MAAM,wBAAwBuB,EAAYC,eAApC,6BAC2BD,EAAYY,iBADvC,4BAfRnC,MAAM,qCAsRiB,wCAAiH,IAEhI,kBAAC,IAAD,aAGA,kBAAC,IAAD,KACEuB,EAAa,kBAAC,IAAD,CAAQ2E,QAAQ,OAAO/J,QAAQ,SAASgK,QAnKnE,WACE,GAAI5E,EAAJ,CAIE,IAAI0Q,EAAQ7R,KAAK2J,MAAsB,IAAhB3J,KAAK7C,UAE9BO,EAAK6D,IAAIC,SAASC,KAAK/D,EAAKgE,MAAMC,SAAX,sDAAmEkQ,IAAUlU,EAAS,IAAI,SAACiE,EAAIC,GAEpHnE,EAAK6D,IAAIC,SAASmQ,UAAlB,sDAA2EE,GAAQhQ,GAClFsG,MAAK,SAACgG,GACL/S,QAAQC,IAAI8S,GACTA,IAAShN,EAAYE,iBAAiBuQ,eACtChS,MAAM,uDAXXA,MAAM,sCAiKiB,0BAAoG,IAEnH,kBAAC,IAAD,qB","file":"static/js/main.afaa4890.chunk.js","sourcesContent":["const IPFS = require('ipfs-core')\r\nexport async function init (flag) {\r\n    if(!flag)return\r\n    const ipfs = await IPFS.create()\r\n    console.log(\"initailzing\")\r\n    window[\"ipfs\"] =  ipfs\r\n}\r\n\r\nexport async function testAdd (file,flag) {\r\n    if(!flag)return\r\n    const ipfs = window[\"ipfs\"]\r\n    const { cid } = await ipfs.add(file)\r\n    // console.info(cid)\r\n    // console.log(\"QAQ\")\r\n    return cid.toString()\r\n    // QmXXY5ZxbtuYj6DnfApLiGstzPN7fvSyigrRee3hDWPCaf\r\n}\r\nexport async function testGet(cid,flag){\r\n    if(!flag)return\r\n    const ipfs = window[\"ipfs\"]\r\n    var returnContent = [];\r\n    for await (const file of ipfs.get(cid)) {\r\n    console.log(file.type, file.path)\r\n    if (!file.content) continue;\r\n    const content = []\r\n    for await (const chunk of file.content) {\r\n        content.push(chunk)\r\n    }\r\n    console.log(content)\r\n    // console.log(content.toString())\r\n    returnContent.push(content)\r\n    }\r\n    \r\n    console.log(\"finish\")\r\n    return returnContent\r\n}\r\n\r\n// export {testAdd, testGet};\r\nwindow[\"ipfsadd\"] = testAdd\r\nwindow[\"ipfsget\"] = testGet\r\nwindow[\"INITIPFS\"] = init\r\n// console.log('QAQ')","import React from \"react\";\r\nimport {Button,Table} from 'react-bootstrap'\r\n\r\nfunction DriveTable(props){\r\n    return(\r\n        <Table striped bordered hover size=\"sm\" style = {{width :'85%',margin:\"auto\",marginTop : \"1%\"}}>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>key</th>\r\n              <th>value</th>\r\n              <th>random</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody >\r\n          {props.files.map((self,index) => <tr key={index}>\r\n              <td width=\"3%\">{index}</td>\r\n              {/* name */}\r\n              <td>{self.key}</td>\r\n              {/* type */}\r\n              <td>{self.value}</td>\r\n              {/* hash */}\r\n              <td width=\"35%\">{self.random}</td>\r\n              \r\n            </tr>)}\r\n          </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default DriveTable","import React, { useState, useEffect} from \"react\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport {Button,Container,Row,Col,Form} from 'react-bootstrap'\r\nimport \"../App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport testAdd from '../test/ipfs'\r\nimport EthCrypto from 'eth-crypto';\r\nimport PrivateKeyForm from '../components/privatekey'\r\nimport DriveTable from '../components/DriveTable'\r\nimport PDContract from \"../contracts/PedersenCommitment.json\";\r\nimport row from \"../model/row\"\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\r\nconst didJWT = require('did-jwt')\r\nconst crypto = require('crypto'); \r\nconst J = require('dag-jose-utils')\r\n// import CryptoJS from \"cryptojs\"\r\nconst CryptoJS = require(\"crypto-js\")\r\nconst privateKeyToPublicKey = require('ethereum-private-key-to-public-key')\r\nfunction CreateCert (props) {\r\n  // const [storageValue ,setstorageValue] = useState(0)\r\n  const [web3,setweb3] = useState(props.web3)\r\n  const [accounts,setaccount] = useState(null)\r\n  const [contract,setcontract] = useState(null)\r\n  const [uploadfile,setuploadfile] = useState(null)\r\n  // const [privatekey,setprivatekey] = useState(null)\r\n  const [initflag,setinitflag] = useState(false);\r\n  const [filelist,setfilelist] = useState([])\r\n  const [Key,setKey] = useState(\"\")\r\n  const [Value,setValue] = useState(\"\")\r\n  // const [IPFSHash,setIPFSHash] = useState(\"QmVKRJ4jxxzqchoB3K4pLwmtJzBawN3GQdR4ZzwYYMJxPa\");\r\n  const [IPFSHash,setIPFSHash] = useState(\"\");\r\n  const [address,setAddr] = useState(\"\");\r\n  const [C_IPFSorDownload,setC_IPFSorDownload] = useState(true);\r\n  const [V_IPFSorDownload,setV_IPFSorDownload] = useState(true);\r\n  const [pubkey,setpubKey] = useState(\"\")\r\n\r\n  const [result,setresult] = useState(\"\")\r\n  \r\n  useEffect(()=>{\r\n    async function fetchData(){\r\n      try {\r\n        // Get network provider and web3 instance.\r\n        //const web3 = await getWeb3();\r\n        if(!window.ipfs)await window[\"INITIPFS\"](true)\r\n        //setweb3(web3)\r\n        // Use web3 to get the user's accounts.\r\n        if(!accounts)setaccount(await web3.eth.getAccounts());\r\n        // Get the contract instance.\r\n        const networkId = await web3.eth.net.getId();\r\n        // console.log(networkId)\r\n        // const deployedNetwork = PDContract.networks[networkId];\r\n        if(!contract){\r\n          let i = new web3.eth.Contract(\r\n            PDContract.abi,\r\n            // deployedNetwork && deployedNetwork.address,\r\n            \"0xf07AceA1dB989df2236339D616338bEcB84a0600\"\r\n          );// 0x4CF247a90956185559EE5fb2A9A7E8dDd8A8E985 Drive address\r\n          \r\n          setcontract(i)\r\n        }\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n    fetchData()//.then(runExample())\r\n  });\r\n \r\n// function OK\r\n  async function UploadtoChain(VerifyIsIPFS){// without encryption'\r\n    \r\n      if(uploadfile && contract){\r\n          try{\r\n          const fileData = JSON.stringify(uploadfile);\r\n          const blob = new Blob([fileData], {type: \"text/plain\"});\r\n          let cid =await window[\"ipfsadd\"](blob,true)\r\n          console.log(cid.toString())\r\n          setIPFSHash(cid.toString())\r\n          GenVerifyJson(cid.toString(),VerifyIsIPFS)\r\n          }\r\n          catch(err){\r\n            console.log(err.message)\r\n          }\r\n          // test decrypt\r\n          // await GetfileDecrypt(dekey,deiv,cid.toString())\r\n      }\r\n      else{\r\n          console.log('no file selected')\r\n          alert('no file selected')\r\n      }\r\n  }\r\n\r\n\r\n// function OK\r\n  function generateHexString(length) {\r\n    var ret = \"\";\r\n    while (ret.length < length) {\r\n      ret += Math.random().toString(16).substring(2);\r\n    }\r\n    return ret.substring(0,length);\r\n  }\r\n\r\n  async function AddColumn(){\r\n    // console.log(\"ADD\")\r\n    if(!Key||!Value){\r\n        alert(\"欄位不能為空值\")\r\n        return\r\n    }\r\n    let tempV = Value\r\n    if(typeof Value != 'number'){\r\n       alert(\"value will be hashed\")\r\n       tempV =\"0x\"+ CryptoJS.SHA256(Value).toString();\r\n    }\r\n    console.log(tempV)\r\n    \r\n    let random =\"0x\"+ generateHexString(58)\r\n    // console.log(random)\r\n    let commitment = await GenPDCommitment(tempV,random);\r\n    // setfilelist(filelist.push(r))\r\n    // await VerifyCommitment(Value,\"38843084404664773737811034719809089006355033921160053724844404266166110833973\");\r\n    var r = new row(Key,Value,random,commitment,typeof Value);\r\n    setfilelist( arr => [...arr, r]);\r\n    setKey(\"\")\r\n    setValue(\"\")\r\n  }\r\n\r\n  async function GenPDCommitment(C_value,C_random){\r\n      try{\r\n        let result = await contract.methods.createCommitment(C_random,C_value).call();\r\n        console.log(result)\r\n        return result\r\n      }\r\n      catch(e){\r\n          console.log(e);\r\n      }\r\n     \r\n  }\r\n\r\n  async function GenSigneture(){\r\n    // global certificate part\r\n    if(!address){\r\n      alert(\"please fill in the receiver address\")\r\n    }\r\n    let SignatureMap = {}\r\n    filelist.forEach(element => {\r\n      let key = \"0x\"+ CryptoJS.SHA256(element.key+element.random).toString()\r\n      SignatureMap[key] = element.Commitment\r\n    });\r\n    let SignObj = {\r\n      Certificate:SignatureMap,\r\n      Issuer_address:accounts[0],\r\n      Receiver_address:address\r\n    }\r\n    let j = JSON.stringify(SignObj)\r\n    console.log(j)// 可以看看要不要hash??\r\n    web3.eth.personal.sign(web3.utils.fromUtf8(j), accounts[0], (err,sig)=>{\r\n          console.log(sig)\r\n          let writeObj = {\r\n            Certificate:SignatureMap,\r\n            Issuer_address:accounts[0],\r\n            Receiver_address:address,\r\n            Issuer_signature:sig\r\n          }\r\n          setuploadfile(writeObj)\r\n    }); \r\n  }\r\n  function Download(){\r\n    const fileData = JSON.stringify(uploadfile);\r\n    const blob = new Blob([fileData], {type: \"text/plain\"});\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.download = 'Certificate.json';\r\n    link.href = url;\r\n    link.click();\r\n  }\r\n\r\n  async function GenVerifyJson(IPFS,VerifyIsIPFS){\r\n      // \r\n      if(!pubkey){\r\n        alert(\"please insert public key first!\")\r\n        return\r\n      }\r\n      // Verify List\r\n      let VerifyList = []\r\n      filelist.forEach(element => {\r\n        let item = {\r\n          key:element.key,\r\n          value:element.value,\r\n          random:element.random\r\n        }\r\n        VerifyList.push(item)\r\n      });\r\n      let writeObj = {\r\n        IPFSHash:IPFS,\r\n        VerifyList:VerifyList\r\n      }\r\n      //encrypt JWT key\r\n      let key = crypto.randomBytes(32)\r\n      let VJwt =await encryptJWEFile(writeObj,key)\r\n      console.log(key.toString('Hex'))\r\n      const encrypted = await EthCrypto.encryptWithPublicKey(\r\n        pubkey, //receiver publicKey\r\n        key.toString('Hex') // message\r\n      )\r\n\r\n      //\r\n      let exportObj = {\r\n        jwt:VJwt,\r\n        decodeMessage:encrypted\r\n      }\r\n\r\n      const fileData2 = JSON.stringify(exportObj);\r\n      const blob2 = new Blob([fileData2], {type: \"text/plain\"});\r\n      if(VerifyIsIPFS){\r\n        let cid =await window[\"ipfsadd\"](blob2,true)\r\n        console.log(cid)\r\n        setresult(cid)\r\n        alert(\"Verify has been published to IPFS,\\n IPFS Hash is \"+cid)\r\n      }\r\n      else{\r\n        const url2 = URL.createObjectURL(blob2);\r\n        const link2 = document.createElement('a');\r\n        link2.download = 'Verify.json';\r\n        link2.href = url2;\r\n        link2.click();\r\n      }\r\n  }\r\n\r\n  function OnchangeInput(e){\r\n    setAddr(e.target.value)\r\n    // console.log(props.privatekey)\r\n  }\r\n  async function encryptJWEFile(payload,key){\r\n    let enc = didJWT.xc20pDirEncrypter(key);\r\n    let w = await J.prepareCleartext(payload)\r\n    let jwt = await didJWT.createJWE(w,[enc])\r\n    return jwt\r\n  }\r\n\r\n  async function GenCertificate(){\r\n    console.log(C_IPFSorDownload)\r\n    console.log(V_IPFSorDownload)\r\n    \r\n    // Verify\r\n    if(V_IPFSorDownload){//IPFS\r\n      // Certificate\r\n      if(C_IPFSorDownload){//IPFS\r\n          UploadtoChain(true)\r\n          // UPload Verifiy to chain\r\n      }\r\n      else{//Local\r\n        Download();\r\n        // 這個Gen 應該要\r\n        GenVerifyJson(\"None\",false)\r\n      }\r\n    }\r\n    else{//Local\r\n      // Certificate\r\n      if(C_IPFSorDownload){//IPFS\r\n        UploadtoChain(false) \r\n      }\r\n      else{//Local\r\n        Download();\r\n        GenVerifyJson(\"None\",false)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  if (!web3) {\r\n    return <div>Loading Web3, accounts, and contract...</div>;\r\n  }\r\n    return (\r\n      <>\r\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossOrigin=\"anonymous\" referrerPolicy=\"no-referrer\" />\r\n      <Container fluid style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n        {/* <Header></Header> */}\r\n        <Row>\r\n          <Col sm={9}>\r\n          <div className=\"App\">\r\n            <br/>\r\n                  <h2>Certificate creation</h2>\r\n                  <h3 style={{color:\"red\"}}>\r\n                    School Mode\r\n                  </h3>\r\n            <br/>\r\n            <h4>add Certificate Column</h4>\r\n            <Form>\r\n                <Form.Row>\r\n                    <Col></Col>\r\n                    <Col xs={2}>\r\n                    <Form.Control className=\"mr-sm-2\"  value={Key} onChange={e => setKey(e.target.value)} placeholder=\"Key\" />\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                    <Form.Control  value={Value} onChange={e => setValue(e.target.value)} placeholder=\"Value\" />\r\n                    </Col>\r\n                    <Col xs={1}>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {AddColumn}><i className=\"fas fa-plus\"></i></Button>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {GenSigneture}>Gen Signature</Button>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <DriveTable files={filelist} />\r\n          </div>\r\n          </Col>\r\n          <Col xs lg=\"2\">\r\n            <PrivateKeyForm Title={\"Receiver publicKey Key\"} privatekey={pubkey} setprivatekey={setpubKey} style={{ marginRight: 4 }}/>\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">Receiver Address</label>\r\n              <Form.Control type=\"text\" value={address} onChange={(e)=>{OnchangeInput(e)}}  placeholder=\"0x.....\"></Form.Control>\r\n            </form>\r\n            <form className=\"Uploadform\">\r\n              <Container>\r\n                  <Row>\r\n                    <Col>\r\n                        <label className=\"password\">Certificate Publish to IPFS(On)</label>\r\n                        <BootstrapSwitchButton checked={C_IPFSorDownload} onChange={()=>{setC_IPFSorDownload(!C_IPFSorDownload)}} onstyle=\"info\" onlabel=\"IPFS\" offlabel=\"Local\" width=\"100\"/>\r\n                        <br/>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                        <label className=\"password\">Verify Publish to IPFS(On)</label>\r\n                        <BootstrapSwitchButton checked={V_IPFSorDownload} onChange={()=>{setV_IPFSorDownload(!V_IPFSorDownload)}} onstyle=\"info\" onlabel=\"IPFS\" offlabel=\"Local\" width=\"100\"/>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <br/>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {GenCertificate}>Gen Certificate</Button>\r\n                      {(result)?\"Verify JWE IPFS : \"+result:\"\"}\r\n                    </Col>\r\n                  \r\n                    {/* <Col>\r\n                    <label className=\"password\"> &nbsp;&nbsp;&nbsp;upload&nbsp;&nbsp;</label>\r\n                    <a className=\"middle\"><Button variant=\"secondary\" content='Upload' onClick = {UploadtoChain}>Upload to IPFS</Button></a>\r\n                    </Col>\r\n                    <Col>\r\n                    <label className=\"password\"> &nbsp;&nbsp;&nbsp;Download&nbsp;&nbsp;</label>\r\n                    <a className=\"middle\"><Button variant=\"secondary\" content='Upload' onClick = {Download}>DownLoad to Local</Button></a>\r\n                    </Col> */}\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      {(IPFSHash)?<a href={\"https://ipfs.io/ipfs/\"+IPFSHash} target=\"_blank\" >View Raw Certificate</a>:\"\"}\r\n                    </Col>\r\n                  </Row>\r\n              </Container>\r\n            </form>\r\n            {/* <form className=\"Uploadform\">\r\n              <label className=\"password\">Upload file</label>\r\n              <input type=\"file\" onChange={captureFile} style={{ marginBottom: 4 }}/>\r\n            </form> */}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      \r\n      \r\n      </>\r\n      );\r\n}\r\n\r\nexport default CreateCert;\r\n","import React, { useState, useEffect} from \"react\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport {Button,Container,Row,Col, Navbar,Nav} from 'react-bootstrap'\r\nimport ReactLogo from './logo.svg';\r\nimport \"./App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport testAdd from './test/ipfs'\r\nimport EthCrypto from 'eth-crypto';\r\nimport PrivateKeyForm from './components/privatekey'\r\nimport DriveTable from './components/DriveTable'\r\nimport PDContract from \"./contracts/PedersenCommitment.json\";\r\nimport Header from './components/Header'\r\nimport Home from './pages/home'\r\nimport Verify from './pages/verify'\r\nimport CreateCert from './pages/createCert'\r\n// import CryptoJS from \"cryptojs\"\r\nconst CryptoJS = require(\"crypto-js\")\r\nconst privateKeyToPublicKey = require('ethereum-private-key-to-public-key')\r\n\r\nfunction App (props) {\r\n  const [web3,setweb3] = useState(null)\r\n  const [accounts,setaccount] = useState(null)\r\n  const [contract,setcontract] = useState(null)\r\n  const [initflag,setinitflag] = useState(false);\r\n\r\n  useEffect(()=>{\r\n    async function fetchData(){\r\n      try {\r\n        // Get network provider and web3 instance.\r\n        const web3 = await getWeb3();\r\n        if(!window.ipfs)await window[\"INITIPFS\"](true)\r\n        setweb3(web3)\r\n        // Use web3 to get the user's accounts.\r\n        const accounts = await web3.eth.getAccounts();\r\n        // Get the contract instance.\r\n        const networkId = await web3.eth.net.getId();\r\n        console.log(networkId)\r\n        // const deployedNetwork = PDContract.networks[networkId];\r\n        const instance = new web3.eth.Contract(\r\n          PDContract.abi,\r\n          // deployedNetwork && deployedNetwork.address,\r\n          \"0xf07AceA1dB989df2236339D616338bEcB84a0600\"\r\n        );// 0x4CF247a90956185559EE5fb2A9A7E8dDd8A8E985 Drive address\r\n        setaccount(accounts)\r\n        setcontract(instance)\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n    fetchData()//.then(runExample())\r\n  });\r\n\r\n  async function runExample  (){\r\n    // const { web3,accounts } = this.state;\r\n    // console.log(\"trigger\")\r\n    if(initflag)return\r\n    if(!web3){\r\n      \r\n      return\r\n    }\r\n    if(!accounts)return\r\n    setinitflag(true)\r\n    let nonce = Math.floor(Math.random() * 1000000)\r\n    // let location = useLocation();\r\n    // 簽章\r\n    // web3.eth.personal.sign(web3.utils.fromUtf8(`I am signing my one-time nonce: ${nonce}`), accounts[0], (err,sig)=>{\r\n      // console.log(sig)\r\n    //   web3.eth.personal.ecRecover(`I am signing my one-time nonce: ${nonce}`,sig)\r\n    //   .then((pubKey)=>{\r\n    //     console.log(pubKey)\r\n    //     if(pubKey === accounts[0].toLowerCase()){\r\n    //        console.log('pass')\r\n    //       //  history.push('/Upload')\r\n          \r\n    //     }\r\n    //   })\r\n      \r\n    // });\r\n\r\n   \r\n  };\r\n  if (!web3) {\r\n    return <div>Loading Web3, accounts, and contract...</div>;\r\n  }\r\n  \r\n  return (\r\n    <>\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossOrigin=\"anonymous\"/>\r\n    <Router> \r\n      <div>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/\">\r\n          <img\r\n            alt=\"\"\r\n            src={ReactLogo}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n          />{' '}\r\n          React Bootstrap\r\n        </Navbar.Brand>\r\n        <Nav>\r\n            <Nav.Item>\r\n              <Link to=\"/\" style={{color: \"white\"}}>Home</Link>\r\n            </Nav.Item>\r\n            &nbsp;&nbsp;\r\n            <Nav.Item>\r\n              <Link to=\"/about\" style={{color: \"white\"}}>Create certificate</Link>\r\n            </Nav.Item>\r\n            &nbsp;&nbsp;\r\n            <Nav.Item>\r\n              <Link to=\"/users\" style={{color: \"white\"}}>Verify Certificate</Link>\r\n            </Nav.Item>\r\n        </Nav>\r\n      </Navbar>\r\n        \r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <CreateCert web3={web3}/>\r\n          </Route>\r\n          <Route path=\"/users\">\r\n            <Verify web3={web3}/>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home web3={web3}/>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import {\r\n//     BrowserRouter as Router,\r\n//     Switch,\r\n//     Route,\r\n//     Link\r\n//   } from \"react-router-dom\";\r\nReactDOM.render(\r\n  // <Router>\r\n  //         <Route exact path=\"/\" component = {App}/> \r\n  //         {/* <Route path=\"/Upload\" component = {Upload} /> */}\r\n  // </Router>, document.getElementById('root'));\r\n<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { useState } from \"react\";\r\n\r\nfunction PrivateKeyForm(props){\r\n    const [type,settype] = useState('input')\r\n\r\n    function showHide(e){\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        if(type === 'input'){\r\n            settype('password')\r\n        }\r\n        else{\r\n            settype('input')\r\n        }\r\n    }\r\n    \r\n    function OnchangeInput(e){\r\n        props.setprivatekey(e.target.value)\r\n        // console.log(props.privatekey)\r\n    }\r\n    \r\n    return(\r\n        <>\r\n        <form className=\"littleform\">\r\n        <label className=\"password\">{props.Title}\r\n        <input type={type} className=\"password__input\" value={props.privatekey} onChange={OnchangeInput} />\r\n        <span className=\"password__show\" onClick={showHide}>{type === 'input' ? 'Hide' : 'Show'}</span>\r\n        </label>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PrivateKeyForm","import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          // \"http://127.0.0.1:8545\"// for development\r\n          \"https://ropsten.infura.io/v3/9f86490b4b644532bfb6e4f26a7ab590\"//for testnet\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","export default class row{\r\n    constructor(k,v,r,c,type,s = true){\r\n        console.log(k,v,r,c)\r\n        this.key = k\r\n        this.value = v\r\n        this.random = r\r\n        this.Commitment = c\r\n        this.type = type\r\n        this.share = s\r\n    }\r\n    getRandomInt(max) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n    \r\n}","export default __webpack_public_path__ + \"static/media/logo.927f1d60.svg\";","import React from \"react\";\r\nimport {Navbar} from 'react-bootstrap'\r\nimport \"../App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ReactLogo from '../logo.svg';\r\n\r\nfunction Header () {\r\n    return (\r\n      <>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"/\">\r\n          <img\r\n            alt=\"\"\r\n            src={ReactLogo}\r\n            width=\"30\"\r\n            height=\"30\"\r\n            className=\"d-inline-block align-top\"\r\n          />{' '}\r\n          React Bootstrap\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n      </>\r\n      );\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect} from \"react\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport {Button,Container,Row,Col,Table,Form} from 'react-bootstrap'\r\nimport \"../App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PDContract from \"../contracts/PedersenCommitment.json\";\r\nimport Header from '../components/Header'\r\nimport bs58 from 'bs58'\r\n// import CryptoJS from \"cryptojs\"\r\nconst CryptoJS = require(\"crypto-js\")\r\nvar Wallet = require('ethereumjs-wallet');\r\nvar EthUtil = require('ethereumjs-util');\r\nconst privateKeyToPublicKey = require('ethereum-private-key-to-public-key')\r\nconst DidRegistryContract = require('ethr-did-registry')\r\nfunction Home (props) {\r\n    const [web3,setweb3] = useState(props.web3)\r\n    const [accounts,setaccount] = useState(null)\r\n    const [contract,setcontract] = useState(null)\r\n    const [attibuteList,setAttr] = useState([])\r\n    const [Akey,setkey] = useState(\"\")\r\n    const [Avalue,setvalue] = useState(\"\")\r\n    const [prikey,setpriKey] = useState(\"\")\r\n    const [pubkey,setpubkey] = useState(\"\")\r\n    const [Addr,setaddr] = useState(\"\")\r\n\r\n    useEffect(()=>{\r\n      async function fetchData(){\r\n        try {\r\n          // Get network provider and web3 instance.\r\n          //const web3 = await getWeb3();\r\n          if(!window.ipfs)await window[\"INITIPFS\"](true)\r\n          //setweb3(web3)\r\n          // Use web3 to get the user's accounts.\r\n          if(!accounts)setaccount(await web3.eth.getAccounts());\r\n          // Get the contract instance.\r\n          const networkId = await web3.eth.net.getId();\r\n          // console.log(networkId)\r\n          // const deployedNetwork = PDContract.networks[networkId];\r\n          if(!contract){\r\n            let i = new web3.eth.Contract(\r\n              DidRegistryContract.abi,\r\n              // deployedNetwork && deployedNetwork.address,\r\n              \"0xdca7ef03e98e0dc2b855be647c39abe984fcf21b\"\r\n            );// 0x4CF247a90956185559EE5fb2A9A7E8dDd8A8E985 Drive address\r\n            \r\n            setcontract(i)\r\n          }\r\n        } catch (error) {\r\n          // Catch any errors for any of the above operations.\r\n          alert(\r\n            `Failed to load web3, accounts, or contract. Check console for details.`,\r\n          );\r\n          console.error(error);\r\n        }\r\n      }\r\n      fetchData()//.then(runExample())\r\n    });\r\n\r\n    async function testReg(){\r\n      let result = await contract.methods.identityOwner(accounts[0]).call()\r\n      console.log(contract)\r\n      const history = []\r\n      let previousChange = await contract.methods.changed(accounts[0]).call()\r\n      \r\n      while (previousChange) {\r\n        if(previousChange == 0)break\r\n          await contract.getPastEvents('DIDAttributeChanged', {\r\n            filter: {id: [accounts[0]]},  \r\n            fromBlock: previousChange,\r\n            toBlock: previousChange\r\n          }, (error, events) => { \r\n      \r\n            if (!error){\r\n              var obj=JSON.parse(JSON.stringify(events));\r\n              var array = Object.keys(obj)\r\n              for(let index in array){\r\n                let event = obj[array[index]].returnValues\r\n                history.unshift(event)\r\n                previousChange = event.previousChange\r\n              }\r\n            }\r\n            else {\r\n              console.log(error)\r\n            }})\r\n      }\r\n      setAttr(attibuteList => history)\r\n      console.log(history)\r\n    }\r\n\r\n    async function TurnRawtoReadable(){\r\n      if(attibuteList.length == 0){\r\n        alert(\"please get raw history first!\")\r\n      }\r\n      let newList = []\r\n      attibuteList.forEach(async(row) => {\r\n        console.log(row.value)\r\n        let cut = CutTailZero(row.name)\r\n        let nv = getIpfsHashFromBytes32(row.value);\r\n        console.log(nv)\r\n        let newrow = {\r\n          name: cut,\r\n          value:nv,\r\n          previousChange:row.previousChange\r\n        }\r\n        newList.push(newrow);\r\n      \r\n      setAttr(attibuteList => newList)\r\n      })\r\n    }\r\n\r\n    async function SetAttributes(){\r\n      let name = web3.utils.asciiToHex(Akey)//string to byte32\r\n      console.log(web3.utils.hexToAscii(name))\r\n      let value =await getBytes32FromIpfsHash(Avalue)\r\n      console.log(getIpfsHashFromBytes32(value))\r\n      console.log(name,value)\r\n      await contract.methods.setAttribute(accounts[0], name, value, \"9999999\").send({ from: accounts[0] });\r\n    }\r\n\r\n    async function getBytes32FromIpfsHash(ipfsListing) {\r\n      return \"0x\"+bs58.decode(ipfsListing).slice(2).toString('hex')\r\n    }\r\n\r\n    function getIpfsHashFromBytes32(bytes32Hex) {\r\n      // Add our default ipfs values for first 2 bytes:\r\n      // function:0x12=sha2, size:0x20=256 bits\r\n      // and cut off leading \"0x\"\r\n      const hashHex = \"1220\" + bytes32Hex.slice(2)\r\n      const hashBytes = Buffer.from(hashHex, 'hex');\r\n      const hashStr = bs58.encode(hashBytes)\r\n      return hashStr\r\n    }\r\n\r\n    function CutTailZero(hex) {\r\n      var str = \"\";\r\n      var i = 0, l = hex.length;\r\n      if (hex.substring(0, 2) === '0x') {\r\n        i = 2;\r\n      }\r\n      for (; i < l; i+=2) {\r\n        var code = parseInt(hex.substr(i, 2), 16);\r\n        if(code != 0) {\r\n          str += String.fromCharCode(code);\r\n        }\r\n      }\r\n    \r\n      return str;\r\n    }\r\n\r\n    function OnchangeKey(e){\r\n      setkey(e.target.value)\r\n    }\r\n\r\n    function OnchangeValue(e){\r\n      setvalue(e.target.value)\r\n    }\r\n\r\n    function GenPkandAddr(){\r\n      // Get a wallet instance from a private key\r\n      const privateKeyBuffer = EthUtil.toBuffer('0x'+prikey);\r\n      const wallet = Wallet.default.fromPrivateKey(privateKeyBuffer);\r\n\r\n      // Get a public key\r\n      let p = wallet.getPublicKeyString();                         \r\n      const publicKey = privateKeyToPublicKey(prikey).toString('hex')\r\n      setpubkey(publicKey)\r\n      // validate\r\n      // 看看hash後的後20個buffer是否跟address一樣\r\n      var addr = EthUtil.keccakFromHexString(p);\r\n      addr = '0x'+ addr.toString('hex',12,32);\r\n      setaddr(addr)\r\n    }\r\n    return (\r\n      <>\r\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossOrigin=\"anonymous\" referrerPolicy=\"no-referrer\" />\r\n      <Container fluid style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n        {/* <Header></Header> */}\r\n        <Row>\r\n          <Col sm={9}>\r\n          <div className=\"App\">\r\n            <br/>\r\n                  <h2>Home</h2>\r\n            <br/>\r\n            <h4>uPort Registry</h4>\r\n            <br/>\r\n            <Button variant=\"secondary\" content='Upload' onClick = {testReg}>Get raw Attributes</Button>\r\n            &nbsp;\r\n            <Button variant=\"secondary\" content='Upload' onClick = {TurnRawtoReadable}>Get Readable Attributes</Button>\r\n            \r\n            <Table striped bordered hover size=\"sm\" style = {{width :'85%',margin:\"auto\",marginTop : \"1%\"}}>\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>key</th>\r\n                  <th>value</th>\r\n                  <th>previousChange</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody >\r\n              {attibuteList.map((self,index) => <tr key={index}>\r\n                  <td width=\"3%\">{index}</td>\r\n                  {/* name */}\r\n                  <td>{self.name}</td>\r\n                  {/* type */}\r\n                  <td>{self.value}</td>\r\n                  {/* hash */}\r\n                  <td>{self.previousChange}</td>\r\n                </tr>)}\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n          </Col>\r\n          <Col xs lg=\"2\">\r\n            \r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">PedersenCommitment Source Code</label>\r\n              <a href=\"https://ropsten.etherscan.io/address/0xf07AceA1dB989df2236339D616338bEcB84a0600#code\" target=\"_blank\">Source Code</a>\r\n            </form>\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">SetAttributes</label>\r\n              <Form.Control type=\"text\" onChange={OnchangeKey}  placeholder=\"insert Key\"></Form.Control>\r\n              <br/>\r\n              <Form.Control type=\"text\" onChange={OnchangeValue}  placeholder=\"insert Value\"></Form.Control>\r\n              <br/>\r\n              <Button variant=\"secondary\" content='Upload' onClick = {SetAttributes}>SetAttributes</Button>\r\n            </form>\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">private Key\r\n              <input type=\"text\" className=\"password__input\" value={prikey} onChange={(e)=>{setpriKey(e.target.value)}} />\r\n              <span className=\"password__show\" onClick={GenPkandAddr}>Gen!</span>\r\n              </label>\r\n              <label className=\"password\">Public key</label>\r\n              <span>{pubkey}</span>\r\n              <label className=\"password\">Address</label>\r\n              <span>{Addr}</span>\r\n            </form>\r\n          </Col>\r\n           \r\n        </Row>\r\n      </Container>\r\n      \r\n      \r\n      </>\r\n      );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect} from \"react\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport EthCrypto from 'eth-crypto';\r\n\r\nimport {Button,Container,Row,Col,Form,Table,Badge,Modal} from 'react-bootstrap'\r\nimport \"../App.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PDContract from \"../contracts/PedersenCommitment.json\";\r\nimport row from \"../model/row\"\r\nimport NavbarCollapse from \"react-bootstrap/esm/NavbarCollapse\";\r\nimport PrivateKeyForm from '../components/privatekey'\r\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\r\n\r\nconst didJWT = require('did-jwt')\r\nconst crypto = require('crypto'); \r\nconst J = require('dag-jose-utils')\r\n// import CryptoJS from \"cryptojs\"\r\nconst CryptoJS = require(\"crypto-js\")\r\nconst privateKeyToPublicKey = require('ethereum-private-key-to-public-key')\r\nfunction Verify (props) {\r\n  const [web3,setweb3] = useState(props.web3)\r\n  const [accounts,setaccount] = useState(null)\r\n  const [contract,setcontract] = useState(null)\r\n  const [Certificate,setCert] = useState(null)\r\n  const [Verify,setVerify] = useState(null)\r\n  const [filelist,setfilelist] = useState([])\r\n  const [VerifyCount,setVerifyCount] = useState(0)\r\n  const [CertCount,setCertCount] = useState(0)\r\n  const [type,setType] = useState(0)\r\n  const [show,setShow] = useState(false)\r\n  const [modalType,setModal] = useState(0)\r\n  const [prikey,setpriKey] = useState(\"\")\r\n  const [pubkey,setpubKey] = useState(\"\")\r\n  const [V_IPFSorDownload,setV_IPFSorDownload] = useState(true);\r\n  const [V_IPFSorUPload,setV_IPFSorUPload] = useState(false);\r\n  const [V_IPFSHash,setV_IPFSHash] = useState(\"\");\r\n  const [readObj,setReadObj] = useState(null)\r\n  const [result,setresult] = useState(\"\")\r\n  \r\n\r\n\r\n  // type : 0 => IPFS\r\n  // type : 1 => Upload Certificate Manually\r\n  // modalType : 0 => Re Verify Each Row\r\n  // modalType : 1 => View Raw Verification\r\n  // modalType : 2 => View Raw Certification\r\n\r\n  useEffect(()=>{\r\n    async function fetchData(){\r\n      try {\r\n        // Get network provider and web3 instance.\r\n        //const web3 = await getWeb3();\r\n        if(!window.ipfs)await window[\"INITIPFS\"](true)\r\n        //setweb3(web3)\r\n        // Use web3 to get the user's accounts.\r\n        if(!accounts)setaccount(await web3.eth.getAccounts());\r\n        // Get the contract instance.\r\n        const networkId = await web3.eth.net.getId();\r\n        // console.log(networkId)\r\n        // const deployedNetwork = PDContract.networks[networkId];\r\n        if(!contract){\r\n          let i = new web3.eth.Contract(\r\n            PDContract.abi,\r\n            // deployedNetwork && deployedNetwork.address,\r\n            \"0xf07AceA1dB989df2236339D616338bEcB84a0600\"\r\n          );// 0x4CF247a90956185559EE5fb2A9A7E8dDd8A8E985 Drive address\r\n          \r\n          setcontract(i)\r\n        }\r\n      } catch (error) {\r\n        // Catch any errors for any of the above operations.\r\n        alert(\r\n          `Failed to load web3, accounts, or contract. Check console for details.`,\r\n        );\r\n        console.error(error);\r\n      }\r\n    }\r\n    fetchData()//.then(runExample())\r\n  });\r\n\r\n  // function OK\r\n  function captureCertFile (event) {\r\n    event.stopPropagation()\r\n    event.preventDefault()\r\n    var reader = new FileReader();\r\n    reader.onload = function (event){\r\n      console.log(event.target.result);\r\n      var obj = JSON.parse(event.target.result);\r\n      console.log(obj)\r\n      setCert(obj)\r\n      setCertCount(Object.keys(obj.Certificate).length)\r\n    };\r\n    reader.readAsText(event.target.files[0]);\r\n    // setuploadfile(event.target.files[0])\r\n    // console.log(CryptoJS)\r\n  }\r\n\r\n  function captureVerifyFile (event) {\r\n    event.stopPropagation()\r\n    event.preventDefault()\r\n    var reader = new FileReader();\r\n    reader.onload =async function (event){\r\n      try{\r\n          var obj = JSON.parse(event.target.result);\r\n          setReadObj(obj)\r\n          ////////////////////////\r\n          // decode the JWT's key\r\n          const rkey = await EthCrypto.decryptWithPrivateKey(\r\n            prikey, // privateKey\r\n            {\r\n              ciphertext:obj.decodeMessage.ciphertext,\r\n              ephemPublicKey:obj.decodeMessage.ephemPublicKey,\r\n              iv:obj.decodeMessage.iv,\r\n              mac:obj.decodeMessage.mac\r\n            }\r\n          );\r\n          // decode JWT\r\n          let Vlist =  await decryptJWEFILE(obj.jwt,rkey);\r\n          ////////////////////////\r\n          setVerify(Vlist)\r\n          setVerifyCount(Object.keys(Vlist.VerifyList).length)\r\n          if(Vlist.IPFSHash == \"None\"){\r\n            setType(1)\r\n          }\r\n          else{\r\n            setType(0)\r\n            // get file from ipfs\r\n            GetfileFromIPFS(Vlist.IPFSHash)\r\n          }\r\n      }catch(e){\r\n        alert(e.message)\r\n      }\r\n    };\r\n    reader.readAsText(event.target.files[0]);\r\n    // setuploadfile(event.target.files[0])\r\n    // console.log(CryptoJS)\r\n  }\r\n\r\n  async function GetVfileFromIPFS(){\r\n    let download = await window[\"ipfsget\"](V_IPFSHash,true)\r\n    var blob = new Blob(download[0], {type: \"text/plain\"});\r\n    \r\n    var reader = new FileReader();\r\n    reader.onload =async (event) => {\r\n      try{\r\n        var obj = JSON.parse(event.target.result);\r\n        setReadObj(obj)\r\n        ////////////////////////\r\n        // decode the JWT's key\r\n        const rkey = await EthCrypto.decryptWithPrivateKey(\r\n          prikey, // privateKey\r\n          {\r\n            ciphertext:obj.decodeMessage.ciphertext,\r\n            ephemPublicKey:obj.decodeMessage.ephemPublicKey,\r\n            iv:obj.decodeMessage.iv,\r\n            mac:obj.decodeMessage.mac\r\n          }\r\n        );\r\n        // decode JWT\r\n        let Vlist =  await decryptJWEFILE(obj.jwt,rkey);\r\n        ////////////////////////\r\n        setVerify(Vlist)\r\n        setVerifyCount(Object.keys(Vlist.VerifyList).length)\r\n        if(Vlist.IPFSHash == \"None\"){\r\n          setType(1)\r\n        }\r\n        else{\r\n          setType(0)\r\n          // get file from ipfs\r\n          GetfileFromIPFS(Vlist.IPFSHash)\r\n        }\r\n    }catch(e){\r\n      alert(e.message)\r\n    }\r\n    };\r\n    reader.readAsBinaryString(blob);\r\n    \r\n  }\r\n\r\n  async function doVerification(){\r\n      if(!Certificate || !Verify){\r\n        alert(\"please upload file first\")\r\n        return;\r\n      }\r\n      setfilelist([])\r\n      let mapping = Certificate.Certificate\r\n      let flag = true;\r\n      Verify.VerifyList.forEach(async element => {\r\n        console.log(element)\r\n        let key = \"0x\"+ CryptoJS.SHA256(element.key+element.random).toString()\r\n        console.log(mapping[key])\r\n        let result = await VerifyCommitment(mapping[key],\"0x\"+ CryptoJS.SHA256(element.value).toString(),element.random)\r\n        console.log(result)\r\n        if(result){\r\n          var r = new row(element.key,element.value,element.random,mapping[key],typeof element.value);\r\n          setfilelist( arr => [...arr, r]);\r\n        }\r\n        else{\r\n          flag = false\r\n        }\r\n      });\r\n      if(flag)\r\n        alert(\"Verification Success\")\r\n      else{\r\n        alert(\"Verification fail\")\r\n        setfilelist([])\r\n      }\r\n  }\r\n  async function VerifyCommitment(Commitment,C_value,C_random){\r\n    try{\r\n      let v  = await contract.methods.openCommitment(Commitment ,C_random,C_value).call();\r\n      return v\r\n    }\r\n    catch(e){\r\n      console.log(e)\r\n      return false\r\n    }\r\n  }\r\n\r\n  function CheckSignature(){\r\n    if(!Certificate){\r\n      alert(\"please upload Certificate first\")\r\n      return;\r\n    }\r\n    let V_Certificate = {\r\n      Certificate:Certificate.Certificate,\r\n      Issuer_address:Certificate.Issuer_address,\r\n      Receiver_address:Certificate.Receiver_address\r\n    }\r\n    let VerStr = JSON.stringify(V_Certificate)\r\n    web3.eth.personal.ecRecover(VerStr,Certificate.Issuer_signature)\r\n    .then((addr)=>{\r\n      console.log(addr)\r\n      console.log(Certificate.Issuer_address)\r\n      if(addr === Certificate.Issuer_address.toLowerCase()){\r\n        console.log(Certificate.Issuer_address)\r\n        alert('Certificate Issuer : '+Certificate.Issuer_address +\"\\n\"\r\n             +'Certificate Signature : '+Certificate.Issuer_signature +\"\\n\"\r\n             +'Status : Pass')\r\n        //  history.push('/Upload')\r\n        \r\n      }\r\n    })\r\n  }\r\n\r\n  function handleCheckBox(position){\r\n    console.log(position)\r\n    if(position > -1){\r\n    // let obj = filelist.indexOf(position)\r\n    // obj.share = !obj.share\r\n    const Updatelist = filelist.map((item,index)=>{\r\n      if(index === position){\r\n        let newrow = new row(item.key,item.value,item.random,item.Commitment,item.type,!item.share)\r\n        return newrow\r\n      }\r\n      else{\r\n        return item\r\n      }\r\n    }\r\n    );\r\n    setfilelist(Updatelist)\r\n    console.log(filelist)\r\n    }\r\n  }\r\n\r\n  async function GenSelectiveVerification(){\r\n    // Verify List\r\n    let VerifyList = []\r\n    filelist.forEach(element => {\r\n      if(element.share){\r\n        let item = {\r\n          key:element.key,\r\n          value:element.value,\r\n          random:element.random\r\n        }\r\n        VerifyList.push(item)\r\n      }\r\n    });\r\n    if(VerifyList.length > 0){\r\n      let writeObj = {\r\n        IPFSHash:Verify.IPFSHash,\r\n        VerifyList:VerifyList\r\n      }\r\n\r\n    //encrypt JWT key\r\n    let key = crypto.randomBytes(32)\r\n    let VJwt =await encryptJWEFile(writeObj,key)\r\n    console.log(key.toString('Hex'))\r\n    const encrypted = await EthCrypto.encryptWithPublicKey(\r\n      pubkey, //receiver publicKey\r\n      key.toString('Hex') // message\r\n    )\r\n\r\n    //\r\n    let exportObj = {\r\n      jwt:VJwt,\r\n      decodeMessage:encrypted\r\n    }\r\n      const fileData2 = JSON.stringify(exportObj);\r\n      const blob2 = new Blob([fileData2], {type: \"text/plain\"});\r\n    \r\n      if(V_IPFSorDownload){\r\n        let cid =await window[\"ipfsadd\"](blob2,true)\r\n        console.log(cid)\r\n        setresult(cid)\r\n        alert(\"Verify has been published to IPFS,\\n IPFS Hash is \"+cid)\r\n      }\r\n      else{\r\n        const url2 = URL.createObjectURL(blob2);\r\n        const link2 = document.createElement('a');\r\n        link2.download = 'Verify.json';\r\n        link2.href = url2;\r\n        link2.click();\r\n      }\r\n    }\r\n    else{\r\n      alert(\"Nothing can share\")\r\n    }\r\n\r\n    setShow(false)\r\n  }\r\n  async function GetfileFromIPFS(ipfsHash){\r\n    let download = await window[\"ipfsget\"](ipfsHash,true)\r\n    var blob = new Blob(download[0], {type: \"text/plain\"});\r\n    \r\n    var reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      console.log(event.target.result);\r\n      var obj = JSON.parse(event.target.result);\r\n      console.log(obj)\r\n      setCert(obj)\r\n      setCertCount(Object.keys(obj.Certificate).length)\r\n    };\r\n    reader.readAsBinaryString(blob);\r\n    \r\n  }\r\n\r\n  function openRawVerifyfile(){\r\n    var newwin = window.open(\"/raw\");\r\n    newwin.document.write(\"<html><title>raw file</title><body>\"+JSON.stringify(Verify)+\"</body></html>\")\r\n  }\r\n\r\n  function ProveIsReceiver(){\r\n    if(!Certificate){\r\n      alert(\"please upload verify.json first!\")\r\n      return\r\n    }\r\n      let nonce = Math.floor(Math.random() * 1000000)\r\n    // let location = useLocation();\r\n    web3.eth.personal.sign(web3.utils.fromUtf8(`I am going to prove myself, one-time nonce: ${nonce}`), accounts[0], (err,sig)=>{\r\n      // console.log(sig)\r\n      web3.eth.personal.ecRecover(`I am going to prove myself, one-time nonce: ${nonce}`,sig)\r\n      .then((addr)=>{\r\n        console.log(addr)\r\n        if(addr === Certificate.Receiver_address.toLowerCase()){\r\n           alert('the signer address is equal to receiver!')\r\n          //  history.push('/Upload')\r\n          \r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  async function decryptJWEFILE(jweObj,key){\r\n    let dec = didJWT.xc20pDirDecrypter(Buffer.from(key,'hex'))\r\n    let decoded =await didJWT.decryptJWE(jweObj,dec)\r\n    return J.decodeCleartext(decoded)\r\n  }\r\n\r\n  async function encryptJWEFile(payload,key){\r\n    let enc = didJWT.xc20pDirEncrypter(key);\r\n    let w = await J.prepareCleartext(payload)\r\n    let jwt = await didJWT.createJWE(w,[enc])\r\n    return jwt\r\n  }\r\n\r\n    return (\r\n      <>\r\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" integrity=\"sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==\" crossOrigin=\"anonymous\" referrerPolicy=\"no-referrer\" />\r\n      <Container fluid style={{ paddingLeft: 0, paddingRight: 0 }}>\r\n        {/* <Header></Header> */}\r\n        \r\n        <Modal show={show} onHide={()=>{setShow(false)}}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Let's Encrypted for your sharing target</Modal.Title>\r\n              </Modal.Header>\r\n            \r\n              <Modal.Body>\r\n                <PrivateKeyForm Title={\"Share Target's publicKey Key\"} privatekey={pubkey} setprivatekey={setpubKey} style={{ marginRight: 4 }}/>\r\n                <form className=\"Uploadform\">\r\n                  <label className=\"password\">Shared Verification Publish to IPFS(On)</label>\r\n                  <BootstrapSwitchButton checked={V_IPFSorDownload} onChange={()=>{setV_IPFSorDownload(!V_IPFSorDownload)}} onstyle=\"info\" onlabel=\"IPFS\" offlabel=\"Local\" width=\"100\"/>\r\n                  <br/>\r\n                </form>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n              <Button variant=\"secondary\" content='Upload' onClick = {GenSelectiveVerification}>Continue Generate Selective Verification</Button>\r\n              </Modal.Footer>\r\n        </Modal>\r\n        <Row>\r\n          <Col sm={9}>\r\n          <div className=\"App\">\r\n            <br/>\r\n                  <h2>Verify</h2>\r\n            <br/>\r\n            <h4>Verify Keys : TotalKeys = {VerifyCount} : {CertCount}</h4>\r\n            <Form>\r\n                <Form.Row>\r\n                    <Col></Col>\r\n                    <Col xs={1}>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {doVerification}>Verification</Button>\r\n                    </Col>\r\n                    <Col xs={3}>\r\n                      <Button variant=\"secondary\" content='Upload' onClick = {()=>{setShow(true)}}>Generate Selective Verification</Button>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Col></Col>\r\n                    <Col xs={4}>\r\n                      {(result)?\"Shared Verify JWE IPFS : \"+result:\"\"}\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Table striped bordered hover size=\"sm\" style = {{width :'85%',margin:\"auto\",marginTop : \"1%\"}}>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>key</th>\r\n                <th>value</th>\r\n                <th>Verification</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody >\r\n            {filelist.map((self,index) => <tr key={index}>\r\n                <td width=\"3%\">{index}</td>\r\n                {/* name */}\r\n                <td>{self.key}</td>\r\n                {/* type */}\r\n                <td>{self.value}</td>\r\n                {/* hash */}\r\n                <td width=\"35%\">\r\n                  {console.log(index)}\r\n                  <Form.Check type=\"checkbox\" checked={self.share} label=\"Allow to Share\" onChange={()=>{handleCheckBox(index)}} /></td>\r\n              </tr>)}\r\n            </tbody>\r\n          </Table>\r\n          </div>\r\n          </Col>\r\n          <Col xs lg=\"2\">\r\n            <PrivateKeyForm Title={\"Opener private Key\"} privatekey={prikey} setprivatekey={setpriKey} style={{ marginRight: 4 }}/>\r\n            \r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">Upload Verify file or IPFSHash</label>\r\n              <BootstrapSwitchButton checked={V_IPFSorUPload} onChange={()=>{setV_IPFSorUPload(!V_IPFSorUPload)}} onstyle=\"info\" onlabel=\"IPFS\" offlabel=\"Upload\" width=\"100\"/>\r\n\r\n              {(V_IPFSorUPload)?\r\n                <>\r\n                  &nbsp;&nbsp;&nbsp;\r\n                  <Button variant=\"dark\" content='Upload' onClick = {GetVfileFromIPFS}>Get Verifiy file!</Button>\r\n                  <label className=\"password\">Verification IPFS Hash</label>\r\n                  <input type={type} className=\"password__input\" value={V_IPFSHash} onChange={(e)=>{setV_IPFSHash(e.target.value)}} />\r\n                </>:\r\n                <>\r\n                <label className=\"password\">Upload Verify file</label>\r\n                <input type=\"file\" onChange={captureVerifyFile} style={{ marginBottom: 4 }}/>\r\n                </>\r\n              }\r\n            </form>\r\n            {(type == 0)?<></>:\r\n            <form className=\"Uploadform\">\r\n            <Container>\r\n              <Row>\r\n                <label className=\"password\">Upload Certificate file</label>\r\n                <input type=\"file\" onChange={captureCertFile} style={{ marginBottom: 4 }}/>\r\n              </Row>\r\n              <Row>\r\n                <label className=\"password\">Certificate Issuer : </label>\r\n                <span>{(Certificate)?Certificate.Issuer_address:\"\"}</span>\r\n                <br/>\r\n              </Row>\r\n            </Container>\r\n            </form>\r\n            }\r\n\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">File Status</label>\r\n              Certificate:&nbsp;{(Certificate)? <Badge variant=\"success\">Load Success</Badge>:<Badge variant=\"danger\">No file</Badge>}\r\n              &nbsp;{(Verify)?<a href={\"https://ipfs.io/ipfs/\"+Verify.IPFSHash} target=\"_blank\" >View Raw</a>:\"\"}\r\n              <br/>\r\n              Verification:&nbsp;{(Verify)?<Badge variant=\"success\">Load Success</Badge>:<Badge variant=\"danger\">No file</Badge>}\r\n              &nbsp;{(Verify)?<a href=\"javascript:void(0)\" onClick={openRawVerifyfile}>View Raw</a>:\"\"}\r\n              <br/>\r\n              &nbsp;{(Verify)?<a href={\"https://ipfs.io/ipfs/\"+V_IPFSHash} target=\"_blank\" >View Raw JWT</a>:\"\"}\r\n            </form>\r\n            <form className=\"Uploadform\">\r\n              <label className=\"password\">Functions</label>\r\n              <Row>\r\n              {(Certificate)?<Button variant=\"dark\" content='Upload' onClick = {CheckSignature}>Check Certificate Issuer's Signature</Button>:\"\"}\r\n              </Row>\r\n              <Row>\r\n                &nbsp;\r\n              </Row>\r\n              <Row>\r\n              {(Certificate)?<Button variant=\"dark\" content='Upload' onClick = {ProveIsReceiver}>Prove I'm the receiver</Button>:\"\"}\r\n              </Row>\r\n              <Row>\r\n                &nbsp;\r\n              </Row>\r\n              {/* <Row>\r\n              {(Certificate)?<Button variant=\"dark\" content='Upload' onClick = {doVerification}>Verify PedersenCommitments</Button>:\"\"}\r\n              </Row> */}\r\n            </form>\r\n          </Col>\r\n           \r\n        </Row>\r\n      </Container>\r\n      \r\n      \r\n      </>\r\n      );\r\n}\r\n\r\nexport default Verify;\r\n"],"sourceRoot":""}